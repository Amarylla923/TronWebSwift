//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: api/api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Protocol_WalletClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_WalletClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_WalletClientInterceptorFactoryProtocol? { get }

  func getAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_Account>

  func getAccountById(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_Account>

  func getAccountBalance(
    _ request: Protocol_AccountBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountBalanceRequest, Protocol_AccountBalanceResponse>

  func getBlockBalanceTrace(
    _ request: Protocol_BlockBalanceTrace.BlockIdentifier,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BlockBalanceTrace.BlockIdentifier, Protocol_BlockBalanceTrace>

  func createTransaction(
    _ request: Protocol_TransferContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransferContract, Protocol_Transaction>

  func createTransaction2(
    _ request: Protocol_TransferContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransferContract, Protocol_TransactionExtention>

  func broadcastTransaction(
    _ request: Protocol_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Transaction, Protocol_Return>

  func updateAccount(
    _ request: Protocol_AccountUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountUpdateContract, Protocol_Transaction>

  func setAccountId(
    _ request: Protocol_SetAccountIdContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_SetAccountIdContract, Protocol_Transaction>

  func updateAccount2(
    _ request: Protocol_AccountUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountUpdateContract, Protocol_TransactionExtention>

  func voteWitnessAccount(
    _ request: Protocol_VoteWitnessContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_VoteWitnessContract, Protocol_Transaction>

  func updateSetting(
    _ request: Protocol_UpdateSettingContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UpdateSettingContract, Protocol_TransactionExtention>

  func updateEnergyLimit(
    _ request: Protocol_UpdateEnergyLimitContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UpdateEnergyLimitContract, Protocol_TransactionExtention>

  func voteWitnessAccount2(
    _ request: Protocol_VoteWitnessContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_VoteWitnessContract, Protocol_TransactionExtention>

  func createAssetIssue(
    _ request: Protocol_AssetIssueContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AssetIssueContract, Protocol_Transaction>

  func createAssetIssue2(
    _ request: Protocol_AssetIssueContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AssetIssueContract, Protocol_TransactionExtention>

  func updateWitness(
    _ request: Protocol_WitnessUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WitnessUpdateContract, Protocol_Transaction>

  func updateWitness2(
    _ request: Protocol_WitnessUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WitnessUpdateContract, Protocol_TransactionExtention>

  func createAccount(
    _ request: Protocol_AccountCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountCreateContract, Protocol_Transaction>

  func createAccount2(
    _ request: Protocol_AccountCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountCreateContract, Protocol_TransactionExtention>

  func createWitness(
    _ request: Protocol_WitnessCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WitnessCreateContract, Protocol_Transaction>

  func createWitness2(
    _ request: Protocol_WitnessCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WitnessCreateContract, Protocol_TransactionExtention>

  func transferAsset(
    _ request: Protocol_TransferAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransferAssetContract, Protocol_Transaction>

  func transferAsset2(
    _ request: Protocol_TransferAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransferAssetContract, Protocol_TransactionExtention>

  func participateAssetIssue(
    _ request: Protocol_ParticipateAssetIssueContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ParticipateAssetIssueContract, Protocol_Transaction>

  func participateAssetIssue2(
    _ request: Protocol_ParticipateAssetIssueContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ParticipateAssetIssueContract, Protocol_TransactionExtention>

  func freezeBalance(
    _ request: Protocol_FreezeBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_FreezeBalanceContract, Protocol_Transaction>

  func freezeBalance2(
    _ request: Protocol_FreezeBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_FreezeBalanceContract, Protocol_TransactionExtention>

  func unfreezeBalance(
    _ request: Protocol_UnfreezeBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UnfreezeBalanceContract, Protocol_Transaction>

  func unfreezeBalance2(
    _ request: Protocol_UnfreezeBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UnfreezeBalanceContract, Protocol_TransactionExtention>

  func unfreezeAsset(
    _ request: Protocol_UnfreezeAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UnfreezeAssetContract, Protocol_Transaction>

  func unfreezeAsset2(
    _ request: Protocol_UnfreezeAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UnfreezeAssetContract, Protocol_TransactionExtention>

  func withdrawBalance(
    _ request: Protocol_WithdrawBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WithdrawBalanceContract, Protocol_Transaction>

  func withdrawBalance2(
    _ request: Protocol_WithdrawBalanceContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_WithdrawBalanceContract, Protocol_TransactionExtention>

  func updateAsset(
    _ request: Protocol_UpdateAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UpdateAssetContract, Protocol_Transaction>

  func updateAsset2(
    _ request: Protocol_UpdateAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UpdateAssetContract, Protocol_TransactionExtention>

  func proposalCreate(
    _ request: Protocol_ProposalCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ProposalCreateContract, Protocol_TransactionExtention>

  func proposalApprove(
    _ request: Protocol_ProposalApproveContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ProposalApproveContract, Protocol_TransactionExtention>

  func proposalDelete(
    _ request: Protocol_ProposalDeleteContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ProposalDeleteContract, Protocol_TransactionExtention>

  func buyStorage(
    _ request: Protocol_BuyStorageContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BuyStorageContract, Protocol_TransactionExtention>

  func buyStorageBytes(
    _ request: Protocol_BuyStorageBytesContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BuyStorageBytesContract, Protocol_TransactionExtention>

  func sellStorage(
    _ request: Protocol_SellStorageContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_SellStorageContract, Protocol_TransactionExtention>

  func exchangeCreate(
    _ request: Protocol_ExchangeCreateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ExchangeCreateContract, Protocol_TransactionExtention>

  func exchangeInject(
    _ request: Protocol_ExchangeInjectContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ExchangeInjectContract, Protocol_TransactionExtention>

  func exchangeWithdraw(
    _ request: Protocol_ExchangeWithdrawContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ExchangeWithdrawContract, Protocol_TransactionExtention>

  func exchangeTransaction(
    _ request: Protocol_ExchangeTransactionContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ExchangeTransactionContract, Protocol_TransactionExtention>

  func marketSellAsset(
    _ request: Protocol_MarketSellAssetContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketSellAssetContract, Protocol_TransactionExtention>

  func marketCancelOrder(
    _ request: Protocol_MarketCancelOrderContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketCancelOrderContract, Protocol_TransactionExtention>

  func getMarketOrderById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrder>

  func getMarketOrderByAccount(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrderList>

  func getMarketPriceByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketPriceList>

  func getMarketOrderListByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketOrderList>

  func getMarketPairList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MarketOrderPairList>

  func listNodes(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NodeList>

  func getAssetIssueByAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_AssetIssueList>

  func getAccountNet(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_AccountNetMessage>

  func getAccountResource(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_AccountResourceMessage>

  func getAssetIssueByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract>

  func getAssetIssueListByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueList>

  func getAssetIssueById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract>

  func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block>

  func getNowBlock2(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockExtention>

  func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block>

  func getBlockByNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockExtention>

  func getTransactionCountByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_NumberMessage>

  func getBlockById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Block>

  func getBlockByLimitNext(
    _ request: Protocol_BlockLimit,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BlockLimit, Protocol_BlockList>

  func getBlockByLimitNext2(
    _ request: Protocol_BlockLimit,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BlockLimit, Protocol_BlockListExtention>

  func getBlockByLatestNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockList>

  func getBlockByLatestNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockListExtention>

  func getTransactionById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction>

  func deployContract(
    _ request: Protocol_CreateSmartContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_CreateSmartContract, Protocol_TransactionExtention>

  func getContract(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_SmartContract>

  func getContractInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_SmartContractDataWrapper>

  func triggerContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention>

  func triggerConstantContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention>

  func clearContractABI(
    _ request: Protocol_ClearABIContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ClearABIContract, Protocol_TransactionExtention>

  func listWitnesses(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_WitnessList>

  func getDelegatedResource(
    _ request: Protocol_DelegatedResourceMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>

  func getDelegatedResourceAccountIndex(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>

  func listProposals(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ProposalList>

  func getPaginatedProposalList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_ProposalList>

  func getProposalById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Proposal>

  func listExchanges(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ExchangeList>

  func getPaginatedExchangeList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_ExchangeList>

  func getExchangeById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Exchange>

  func getChainParameters(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ChainParameters>

  func getAssetIssueList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AssetIssueList>

  func getPaginatedAssetIssueList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_AssetIssueList>

  func totalTransaction(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage>

  func getNextMaintenanceTime(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage>

  func getTransactionSign(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_Transaction>

  func getTransactionSign2(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_TransactionExtention>

  func createAddress(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage>

  func easyTransferAsset(
    _ request: Protocol_EasyTransferAssetMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EasyTransferAssetMessage, Protocol_EasyTransferResponse>

  func easyTransferAssetByPrivate(
    _ request: Protocol_EasyTransferAssetByPrivateMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EasyTransferAssetByPrivateMessage, Protocol_EasyTransferResponse>

  func easyTransfer(
    _ request: Protocol_EasyTransferMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EasyTransferMessage, Protocol_EasyTransferResponse>

  func easyTransferByPrivate(
    _ request: Protocol_EasyTransferByPrivateMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EasyTransferByPrivateMessage, Protocol_EasyTransferResponse>

  func generateAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>

  func getTransactionInfoById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_TransactionInfo>

  func accountPermissionUpdate(
    _ request: Protocol_AccountPermissionUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountPermissionUpdateContract, Protocol_TransactionExtention>

  func addSign(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_TransactionExtention>

  func getTransactionSignWeight(
    _ request: Protocol_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionSignWeight>

  func getTransactionApprovedList(
    _ request: Protocol_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionApprovedList>

  func getNodeInfo(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NodeInfo>

  func getRewardInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage>

  func getBrokerageInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage>

  func updateBrokerage(
    _ request: Protocol_UpdateBrokerageContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_UpdateBrokerageContract, Protocol_TransactionExtention>

  func createShieldedTransaction(
    _ request: Protocol_PrivateParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PrivateParameters, Protocol_TransactionExtention>

  func getMerkleTreeVoucherInfo(
    _ request: Protocol_OutputPointInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>

  func scanNoteByIvk(
    _ request: Protocol_IvkDecryptParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>

  func scanAndMarkNoteByIvk(
    _ request: Protocol_IvkDecryptAndMarkParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>

  func scanNoteByOvk(
    _ request: Protocol_OvkDecryptParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>

  func getSpendingKey(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BytesMessage>

  func getExpandedSpendingKey(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_ExpandedSpendingKeyMessage>

  func getAkFromAsk(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage>

  func getNkFromNsk(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage>

  func getIncomingViewingKey(
    _ request: Protocol_ViewingKeyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ViewingKeyMessage, Protocol_IncomingViewingKeyMessage>

  func getDiversifier(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_DiversifierMessage>

  func getNewShieldedAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ShieldedAddressInfo>

  func getZenPaymentAddress(
    _ request: Protocol_IncomingViewingKeyDiversifierMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IncomingViewingKeyDiversifierMessage, Protocol_PaymentAddressMessage>

  func getRcm(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BytesMessage>

  func isSpend(
    _ request: Protocol_NoteParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NoteParameters, Protocol_SpendResult>

  func createShieldedTransactionWithoutSpendAuthSig(
    _ request: Protocol_PrivateParametersWithoutAsk,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PrivateParametersWithoutAsk, Protocol_TransactionExtention>

  func getShieldTransactionHash(
    _ request: Protocol_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Transaction, Protocol_BytesMessage>

  func createSpendAuthSig(
    _ request: Protocol_SpendAuthSigParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_SpendAuthSigParameters, Protocol_BytesMessage>

  func createShieldNullifier(
    _ request: Protocol_NfParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NfParameters, Protocol_BytesMessage>

  func createShieldedContractParameters(
    _ request: Protocol_PrivateShieldedTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PrivateShieldedTRC20Parameters, Protocol_ShieldedTRC20Parameters>

  func createShieldedContractParametersWithoutAsk(
    _ request: Protocol_PrivateShieldedTRC20ParametersWithoutAsk,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PrivateShieldedTRC20ParametersWithoutAsk, Protocol_ShieldedTRC20Parameters>

  func scanShieldedTRC20NotesByIvk(
    _ request: Protocol_IvkDecryptTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>

  func scanShieldedTRC20NotesByOvk(
    _ request: Protocol_OvkDecryptTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>

  func isShieldedTRC20ContractNoteSpent(
    _ request: Protocol_NfTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NfTRC20Parameters, Protocol_NullifierResult>

  func getTriggerInputForShieldedTRC20Contract(
    _ request: Protocol_ShieldedTRC20TriggerContractParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_ShieldedTRC20TriggerContractParameters, Protocol_BytesMessage>

  func createCommonTransaction(
    _ request: Protocol_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionExtention>

  func getTransactionInfoByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_TransactionInfoList>

  func getBurnTrx(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage>

  func getTransactionFromPending(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction>

  func getTransactionListFromPending(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_TransactionIdList>

  func getPendingSize(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage>
}

extension Protocol_WalletClientProtocol {
  internal var serviceName: String {
    return "protocol.Wallet"
  }

  /// Unary call to GetAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_Account> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountById(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_Account> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAccountById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountByIdInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountBalance
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountBalance(
    _ request: Protocol_AccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountBalanceRequest, Protocol_AccountBalanceResponse> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAccountBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountBalanceInterceptors() ?? []
    )
  }

  /// Unary call to GetBlockBalanceTrace
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockBalanceTrace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockBalanceTrace(
    _ request: Protocol_BlockBalanceTrace.BlockIdentifier,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BlockBalanceTrace.BlockIdentifier, Protocol_BlockBalanceTrace> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockBalanceTrace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockBalanceTraceInterceptors() ?? []
    )
  }

  ///Please use CreateTransaction2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTransaction(
    _ request: Protocol_TransferContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransferContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransactionInterceptors() ?? []
    )
  }

  ///Use this function instead of CreateTransaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransaction2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTransaction2(
    _ request: Protocol_TransferContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransferContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateTransaction2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransaction2Interceptors() ?? []
    )
  }

  /// Unary call to BroadcastTransaction
  ///
  /// - Parameters:
  ///   - request: Request to send to BroadcastTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func broadcastTransaction(
    _ request: Protocol_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Transaction, Protocol_Return> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/BroadcastTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTransactionInterceptors() ?? []
    )
  }

  ///Please use UpdateAccount2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccount(
    _ request: Protocol_AccountUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountUpdateContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
    )
  }

  /// Unary call to SetAccountId
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAccountId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAccountId(
    _ request: Protocol_SetAccountIdContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_SetAccountIdContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/SetAccountId",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAccountIdInterceptors() ?? []
    )
  }

  ///Use this function instead of UpdateAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccount2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccount2(
    _ request: Protocol_AccountUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountUpdateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateAccount2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccount2Interceptors() ?? []
    )
  }

  ///Please use VoteWitnessAccount2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteWitnessAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteWitnessAccount(
    _ request: Protocol_VoteWitnessContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_VoteWitnessContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/VoteWitnessAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteWitnessAccountInterceptors() ?? []
    )
  }

  ///modify the consume_user_resource_percent
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSetting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSetting(
    _ request: Protocol_UpdateSettingContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UpdateSettingContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateSetting",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSettingInterceptors() ?? []
    )
  }

  ///modify the energy_limit
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnergyLimit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateEnergyLimit(
    _ request: Protocol_UpdateEnergyLimitContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UpdateEnergyLimitContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateEnergyLimit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnergyLimitInterceptors() ?? []
    )
  }

  ///Use this function instead of VoteWitnessAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteWitnessAccount2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteWitnessAccount2(
    _ request: Protocol_VoteWitnessContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_VoteWitnessContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/VoteWitnessAccount2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteWitnessAccount2Interceptors() ?? []
    )
  }

  ///Please use CreateAssetIssue2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAssetIssue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAssetIssue(
    _ request: Protocol_AssetIssueContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AssetIssueContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateAssetIssue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAssetIssueInterceptors() ?? []
    )
  }

  ///Use this function instead of CreateAssetIssue.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAssetIssue2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAssetIssue2(
    _ request: Protocol_AssetIssueContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AssetIssueContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateAssetIssue2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAssetIssue2Interceptors() ?? []
    )
  }

  ///Please use UpdateWitness2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWitness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateWitness(
    _ request: Protocol_WitnessUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WitnessUpdateContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateWitness",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWitnessInterceptors() ?? []
    )
  }

  ///Use this function instead of UpdateWitness.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWitness2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateWitness2(
    _ request: Protocol_WitnessUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WitnessUpdateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateWitness2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWitness2Interceptors() ?? []
    )
  }

  ///Please use CreateAccount2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount(
    _ request: Protocol_AccountCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountCreateContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  ///Use this function instead of CreateAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAccount2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount2(
    _ request: Protocol_AccountCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountCreateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateAccount2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccount2Interceptors() ?? []
    )
  }

  ///Please use CreateWitness2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWitness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createWitness(
    _ request: Protocol_WitnessCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WitnessCreateContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateWitness",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateWitnessInterceptors() ?? []
    )
  }

  ///Use this function instead of CreateWitness.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWitness2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createWitness2(
    _ request: Protocol_WitnessCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WitnessCreateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateWitness2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateWitness2Interceptors() ?? []
    )
  }

  ///Please use TransferAsset2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferAsset(
    _ request: Protocol_TransferAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransferAssetContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/TransferAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferAssetInterceptors() ?? []
    )
  }

  ///Use this function instead of TransferAsset.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferAsset2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferAsset2(
    _ request: Protocol_TransferAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransferAssetContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/TransferAsset2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferAsset2Interceptors() ?? []
    )
  }

  ///Please use ParticipateAssetIssue2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to ParticipateAssetIssue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func participateAssetIssue(
    _ request: Protocol_ParticipateAssetIssueContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ParticipateAssetIssueContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ParticipateAssetIssue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParticipateAssetIssueInterceptors() ?? []
    )
  }

  ///Use this function instead of ParticipateAssetIssue.
  ///
  /// - Parameters:
  ///   - request: Request to send to ParticipateAssetIssue2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func participateAssetIssue2(
    _ request: Protocol_ParticipateAssetIssueContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ParticipateAssetIssueContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ParticipateAssetIssue2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParticipateAssetIssue2Interceptors() ?? []
    )
  }

  ///Please use FreezeBalance2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to FreezeBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func freezeBalance(
    _ request: Protocol_FreezeBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_FreezeBalanceContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/FreezeBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFreezeBalanceInterceptors() ?? []
    )
  }

  ///Use this function instead of FreezeBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to FreezeBalance2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func freezeBalance2(
    _ request: Protocol_FreezeBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_FreezeBalanceContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/FreezeBalance2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFreezeBalance2Interceptors() ?? []
    )
  }

  ///Please use UnfreezeBalance2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnfreezeBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfreezeBalance(
    _ request: Protocol_UnfreezeBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UnfreezeBalanceContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UnfreezeBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeBalanceInterceptors() ?? []
    )
  }

  ///Use this function instead of UnfreezeBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnfreezeBalance2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfreezeBalance2(
    _ request: Protocol_UnfreezeBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UnfreezeBalanceContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UnfreezeBalance2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeBalance2Interceptors() ?? []
    )
  }

  ///Please use UnfreezeAsset2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnfreezeAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfreezeAsset(
    _ request: Protocol_UnfreezeAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UnfreezeAssetContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UnfreezeAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeAssetInterceptors() ?? []
    )
  }

  ///Use this function instead of UnfreezeAsset.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnfreezeAsset2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfreezeAsset2(
    _ request: Protocol_UnfreezeAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UnfreezeAssetContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UnfreezeAsset2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeAsset2Interceptors() ?? []
    )
  }

  ///Please use WithdrawBalance2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawBalance(
    _ request: Protocol_WithdrawBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WithdrawBalanceContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/WithdrawBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawBalanceInterceptors() ?? []
    )
  }

  ///Use this function instead of WithdrawBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawBalance2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawBalance2(
    _ request: Protocol_WithdrawBalanceContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_WithdrawBalanceContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/WithdrawBalance2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawBalance2Interceptors() ?? []
    )
  }

  ///Please use UpdateAsset2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAsset(
    _ request: Protocol_UpdateAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UpdateAssetContract, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAssetInterceptors() ?? []
    )
  }

  ///Use this function instead of UpdateAsset.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAsset2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAsset2(
    _ request: Protocol_UpdateAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UpdateAssetContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateAsset2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAsset2Interceptors() ?? []
    )
  }

  /// Unary call to ProposalCreate
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalCreate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalCreate(
    _ request: Protocol_ProposalCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ProposalCreateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ProposalCreate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalCreateInterceptors() ?? []
    )
  }

  /// Unary call to ProposalApprove
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalApprove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalApprove(
    _ request: Protocol_ProposalApproveContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ProposalApproveContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ProposalApprove",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalApproveInterceptors() ?? []
    )
  }

  /// Unary call to ProposalDelete
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalDelete(
    _ request: Protocol_ProposalDeleteContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ProposalDeleteContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ProposalDelete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalDeleteInterceptors() ?? []
    )
  }

  /// Unary call to BuyStorage
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyStorage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyStorage(
    _ request: Protocol_BuyStorageContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BuyStorageContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/BuyStorage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyStorageInterceptors() ?? []
    )
  }

  /// Unary call to BuyStorageBytes
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyStorageBytes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyStorageBytes(
    _ request: Protocol_BuyStorageBytesContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BuyStorageBytesContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/BuyStorageBytes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyStorageBytesInterceptors() ?? []
    )
  }

  /// Unary call to SellStorage
  ///
  /// - Parameters:
  ///   - request: Request to send to SellStorage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellStorage(
    _ request: Protocol_SellStorageContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_SellStorageContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/SellStorage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellStorageInterceptors() ?? []
    )
  }

  /// Unary call to ExchangeCreate
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeCreate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeCreate(
    _ request: Protocol_ExchangeCreateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ExchangeCreateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ExchangeCreate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeCreateInterceptors() ?? []
    )
  }

  /// Unary call to ExchangeInject
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeInject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeInject(
    _ request: Protocol_ExchangeInjectContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ExchangeInjectContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ExchangeInject",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeInjectInterceptors() ?? []
    )
  }

  /// Unary call to ExchangeWithdraw
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeWithdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeWithdraw(
    _ request: Protocol_ExchangeWithdrawContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ExchangeWithdrawContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ExchangeWithdraw",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeWithdrawInterceptors() ?? []
    )
  }

  /// Unary call to ExchangeTransaction
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeTransaction(
    _ request: Protocol_ExchangeTransactionContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ExchangeTransactionContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ExchangeTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeTransactionInterceptors() ?? []
    )
  }

  /// Unary call to MarketSellAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketSellAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketSellAsset(
    _ request: Protocol_MarketSellAssetContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketSellAssetContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/MarketSellAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketSellAssetInterceptors() ?? []
    )
  }

  /// Unary call to MarketCancelOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketCancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketCancelOrder(
    _ request: Protocol_MarketCancelOrderContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketCancelOrderContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/MarketCancelOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketCancelOrderInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrder> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMarketOrderById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderByIdInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderByAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderByAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderByAccount(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrderList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMarketOrderByAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderByAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketPriceByPair
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketPriceByPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketPriceByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketPriceList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMarketPriceByPair",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketPriceByPairInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderListByPair
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderListByPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderListByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketOrderList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMarketOrderListByPair",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderListByPairInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketPairList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketPairList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketPairList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MarketOrderPairList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMarketPairList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketPairListInterceptors() ?? []
    )
  }

  /// Unary call to ListNodes
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listNodes(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NodeList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ListNodes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNodesInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueByAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueByAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueByAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAssetIssueByAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueByAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountNet
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountNet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountNet(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_AccountNetMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAccountNet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountNetInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountResource
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountResource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountResource(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_AccountResourceMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAccountResource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountResourceInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueByName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAssetIssueByName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueByNameInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueListByName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueListByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueListByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAssetIssueListByName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueListByNameInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAssetIssueById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueByIdInterceptors() ?? []
    )
  }

  ///Please use GetNowBlock2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNowBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNowBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? []
    )
  }

  ///Use this function instead of GetNowBlock.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNowBlock2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNowBlock2(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNowBlock2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNowBlock2Interceptors() ?? []
    )
  }

  ///Please use GetBlockByNum2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? []
    )
  }

  ///Use this function instead of GetBlockByNum.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByNum2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByNum2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByNum2Interceptors() ?? []
    )
  }

  /// Unary call to GetTransactionCountByBlockNum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionCountByBlockNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionCountByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionCountByBlockNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionCountByBlockNumInterceptors() ?? []
    )
  }

  /// Unary call to GetBlockById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByIdInterceptors() ?? []
    )
  }

  ///Please use GetBlockByLimitNext2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByLimitNext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByLimitNext(
    _ request: Protocol_BlockLimit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BlockLimit, Protocol_BlockList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByLimitNext",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByLimitNextInterceptors() ?? []
    )
  }

  ///Use this function instead of GetBlockByLimitNext.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByLimitNext2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByLimitNext2(
    _ request: Protocol_BlockLimit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BlockLimit, Protocol_BlockListExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByLimitNext2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByLimitNext2Interceptors() ?? []
    )
  }

  ///Please use GetBlockByLatestNum2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByLatestNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByLatestNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByLatestNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByLatestNumInterceptors() ?? []
    )
  }

  ///Use this function instead of GetBlockByLatestNum.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByLatestNum2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByLatestNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockListExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBlockByLatestNum2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByLatestNum2Interceptors() ?? []
    )
  }

  /// Unary call to GetTransactionById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionByIdInterceptors() ?? []
    )
  }

  /// Unary call to DeployContract
  ///
  /// - Parameters:
  ///   - request: Request to send to DeployContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deployContract(
    _ request: Protocol_CreateSmartContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_CreateSmartContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/DeployContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployContractInterceptors() ?? []
    )
  }

  /// Unary call to GetContract
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContract(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_SmartContract> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContractInterceptors() ?? []
    )
  }

  /// Unary call to GetContractInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContractInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContractInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_SmartContractDataWrapper> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetContractInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContractInfoInterceptors() ?? []
    )
  }

  /// Unary call to TriggerContract
  ///
  /// - Parameters:
  ///   - request: Request to send to TriggerContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func triggerContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/TriggerContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTriggerContractInterceptors() ?? []
    )
  }

  /// Unary call to TriggerConstantContract
  ///
  /// - Parameters:
  ///   - request: Request to send to TriggerConstantContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func triggerConstantContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/TriggerConstantContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTriggerConstantContractInterceptors() ?? []
    )
  }

  /// Unary call to ClearContractABI
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearContractABI.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clearContractABI(
    _ request: Protocol_ClearABIContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ClearABIContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ClearContractABI",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearContractABIInterceptors() ?? []
    )
  }

  /// Unary call to ListWitnesses
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWitnesses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listWitnesses(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_WitnessList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ListWitnesses",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListWitnessesInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegatedResource
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegatedResource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegatedResource(
    _ request: Protocol_DelegatedResourceMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetDelegatedResource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegatedResourceInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegatedResourceAccountIndex
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegatedResourceAccountIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegatedResourceAccountIndex(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetDelegatedResourceAccountIndex",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegatedResourceAccountIndexInterceptors() ?? []
    )
  }

  /// Unary call to ListProposals
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProposals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listProposals(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ProposalList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ListProposals",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProposalsInterceptors() ?? []
    )
  }

  /// Unary call to GetPaginatedProposalList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaginatedProposalList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaginatedProposalList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_ProposalList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetPaginatedProposalList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaginatedProposalListInterceptors() ?? []
    )
  }

  /// Unary call to GetProposalById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProposalById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProposalById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Proposal> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetProposalById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProposalByIdInterceptors() ?? []
    )
  }

  /// Unary call to ListExchanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExchanges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExchanges(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ExchangeList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ListExchanges",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExchangesInterceptors() ?? []
    )
  }

  /// Unary call to GetPaginatedExchangeList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaginatedExchangeList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaginatedExchangeList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_ExchangeList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetPaginatedExchangeList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaginatedExchangeListInterceptors() ?? []
    )
  }

  /// Unary call to GetExchangeById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExchangeById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExchangeById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Exchange> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetExchangeById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExchangeByIdInterceptors() ?? []
    )
  }

  /// Unary call to GetChainParameters
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChainParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChainParameters(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ChainParameters> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetChainParameters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChainParametersInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAssetIssueList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueListInterceptors() ?? []
    )
  }

  /// Unary call to GetPaginatedAssetIssueList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaginatedAssetIssueList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaginatedAssetIssueList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetPaginatedAssetIssueList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaginatedAssetIssueListInterceptors() ?? []
    )
  }

  /// Unary call to TotalTransaction
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalTransaction(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/TotalTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalTransactionInterceptors() ?? []
    )
  }

  /// Unary call to GetNextMaintenanceTime
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNextMaintenanceTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNextMaintenanceTime(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNextMaintenanceTime",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextMaintenanceTimeInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///Please use GetTransactionSign2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionSign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionSign(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionSign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionSignInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///Use this function instead of GetTransactionSign.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionSign2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionSign2(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionSign2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionSign2Interceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAddress(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAddressInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to EasyTransferAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func easyTransferAsset(
    _ request: Protocol_EasyTransferAssetMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EasyTransferAssetMessage, Protocol_EasyTransferResponse> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/EasyTransferAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEasyTransferAssetInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to EasyTransferAssetByPrivate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func easyTransferAssetByPrivate(
    _ request: Protocol_EasyTransferAssetByPrivateMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EasyTransferAssetByPrivateMessage, Protocol_EasyTransferResponse> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/EasyTransferAssetByPrivate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEasyTransferAssetByPrivateInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to EasyTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func easyTransfer(
    _ request: Protocol_EasyTransferMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EasyTransferMessage, Protocol_EasyTransferResponse> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/EasyTransfer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEasyTransferInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to EasyTransferByPrivate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func easyTransferByPrivate(
    _ request: Protocol_EasyTransferByPrivateMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EasyTransferByPrivateMessage, Protocol_EasyTransferResponse> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/EasyTransferByPrivate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEasyTransferByPrivateInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GenerateAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateAddressInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionInfoById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionInfoById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionInfoById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_TransactionInfo> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionInfoById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionInfoByIdInterceptors() ?? []
    )
  }

  /// Unary call to AccountPermissionUpdate
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPermissionUpdate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPermissionUpdate(
    _ request: Protocol_AccountPermissionUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountPermissionUpdateContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/AccountPermissionUpdate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPermissionUpdateInterceptors() ?? []
    )
  }

  /// Unary call to AddSign
  ///
  /// - Parameters:
  ///   - request: Request to send to AddSign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addSign(
    _ request: Protocol_TransactionSign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TransactionSign, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/AddSign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddSignInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionSignWeight
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionSignWeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionSignWeight(
    _ request: Protocol_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionSignWeight> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionSignWeight",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionSignWeightInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionApprovedList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionApprovedList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionApprovedList(
    _ request: Protocol_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionApprovedList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionApprovedList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionApprovedListInterceptors() ?? []
    )
  }

  /// Unary call to GetNodeInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodeInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNodeInfo(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NodeInfo> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNodeInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNodeInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetRewardInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRewardInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRewardInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetRewardInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRewardInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetBrokerageInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBrokerageInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBrokerageInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBrokerageInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBrokerageInfoInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBrokerage
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBrokerage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBrokerage(
    _ request: Protocol_UpdateBrokerageContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_UpdateBrokerageContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/UpdateBrokerage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBrokerageInterceptors() ?? []
    )
  }

  /// for shiededTransaction
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShieldedTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createShieldedTransaction(
    _ request: Protocol_PrivateParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PrivateParameters, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateShieldedTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateShieldedTransactionInterceptors() ?? []
    )
  }

  /// Unary call to GetMerkleTreeVoucherInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMerkleTreeVoucherInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMerkleTreeVoucherInfo(
    _ request: Protocol_OutputPointInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetMerkleTreeVoucherInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMerkleTreeVoucherInfoInterceptors() ?? []
    )
  }

  /// Unary call to ScanNoteByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanNoteByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanNoteByIvk(
    _ request: Protocol_IvkDecryptParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptParameters, Protocol_DecryptNotes> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ScanNoteByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanNoteByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanAndMarkNoteByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanAndMarkNoteByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanAndMarkNoteByIvk(
    _ request: Protocol_IvkDecryptAndMarkParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ScanAndMarkNoteByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanAndMarkNoteByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanNoteByOvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanNoteByOvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanNoteByOvk(
    _ request: Protocol_OvkDecryptParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OvkDecryptParameters, Protocol_DecryptNotes> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ScanNoteByOvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanNoteByOvkInterceptors() ?? []
    )
  }

  /// Unary call to GetSpendingKey
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSpendingKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSpendingKey(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetSpendingKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSpendingKeyInterceptors() ?? []
    )
  }

  /// Unary call to GetExpandedSpendingKey
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExpandedSpendingKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExpandedSpendingKey(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_ExpandedSpendingKeyMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetExpandedSpendingKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExpandedSpendingKeyInterceptors() ?? []
    )
  }

  /// Unary call to GetAkFromAsk
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAkFromAsk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAkFromAsk(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetAkFromAsk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAkFromAskInterceptors() ?? []
    )
  }

  /// Unary call to GetNkFromNsk
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNkFromNsk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNkFromNsk(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNkFromNsk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNkFromNskInterceptors() ?? []
    )
  }

  /// Unary call to GetIncomingViewingKey
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIncomingViewingKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getIncomingViewingKey(
    _ request: Protocol_ViewingKeyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ViewingKeyMessage, Protocol_IncomingViewingKeyMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetIncomingViewingKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIncomingViewingKeyInterceptors() ?? []
    )
  }

  /// Unary call to GetDiversifier
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDiversifier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDiversifier(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_DiversifierMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetDiversifier",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDiversifierInterceptors() ?? []
    )
  }

  /// Unary call to GetNewShieldedAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNewShieldedAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNewShieldedAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ShieldedAddressInfo> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetNewShieldedAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNewShieldedAddressInterceptors() ?? []
    )
  }

  /// Unary call to GetZenPaymentAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to GetZenPaymentAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getZenPaymentAddress(
    _ request: Protocol_IncomingViewingKeyDiversifierMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IncomingViewingKeyDiversifierMessage, Protocol_PaymentAddressMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetZenPaymentAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetZenPaymentAddressInterceptors() ?? []
    )
  }

  /// Unary call to GetRcm
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRcm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRcm(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetRcm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRcmInterceptors() ?? []
    )
  }

  /// Unary call to IsSpend
  ///
  /// - Parameters:
  ///   - request: Request to send to IsSpend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isSpend(
    _ request: Protocol_NoteParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NoteParameters, Protocol_SpendResult> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/IsSpend",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsSpendInterceptors() ?? []
    )
  }

  /// Unary call to CreateShieldedTransactionWithoutSpendAuthSig
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShieldedTransactionWithoutSpendAuthSig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createShieldedTransactionWithoutSpendAuthSig(
    _ request: Protocol_PrivateParametersWithoutAsk,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PrivateParametersWithoutAsk, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateShieldedTransactionWithoutSpendAuthSigInterceptors() ?? []
    )
  }

  /// Unary call to GetShieldTransactionHash
  ///
  /// - Parameters:
  ///   - request: Request to send to GetShieldTransactionHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getShieldTransactionHash(
    _ request: Protocol_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Transaction, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetShieldTransactionHash",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetShieldTransactionHashInterceptors() ?? []
    )
  }

  /// Unary call to CreateSpendAuthSig
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSpendAuthSig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSpendAuthSig(
    _ request: Protocol_SpendAuthSigParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_SpendAuthSigParameters, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateSpendAuthSig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSpendAuthSigInterceptors() ?? []
    )
  }

  /// Unary call to CreateShieldNullifier
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShieldNullifier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createShieldNullifier(
    _ request: Protocol_NfParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NfParameters, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateShieldNullifier",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateShieldNullifierInterceptors() ?? []
    )
  }

  ///for shielded contract
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShieldedContractParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createShieldedContractParameters(
    _ request: Protocol_PrivateShieldedTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PrivateShieldedTRC20Parameters, Protocol_ShieldedTRC20Parameters> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateShieldedContractParameters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateShieldedContractParametersInterceptors() ?? []
    )
  }

  /// Unary call to CreateShieldedContractParametersWithoutAsk
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateShieldedContractParametersWithoutAsk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createShieldedContractParametersWithoutAsk(
    _ request: Protocol_PrivateShieldedTRC20ParametersWithoutAsk,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PrivateShieldedTRC20ParametersWithoutAsk, Protocol_ShieldedTRC20Parameters> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateShieldedContractParametersWithoutAskInterceptors() ?? []
    )
  }

  /// Unary call to ScanShieldedTRC20NotesByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanShieldedTRC20NotesByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanShieldedTRC20NotesByIvk(
    _ request: Protocol_IvkDecryptTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ScanShieldedTRC20NotesByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanShieldedTRC20NotesByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanShieldedTRC20NotesByOvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanShieldedTRC20NotesByOvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanShieldedTRC20NotesByOvk(
    _ request: Protocol_OvkDecryptTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/ScanShieldedTRC20NotesByOvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanShieldedTRC20NotesByOvkInterceptors() ?? []
    )
  }

  /// Unary call to IsShieldedTRC20ContractNoteSpent
  ///
  /// - Parameters:
  ///   - request: Request to send to IsShieldedTRC20ContractNoteSpent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isShieldedTRC20ContractNoteSpent(
    _ request: Protocol_NfTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NfTRC20Parameters, Protocol_NullifierResult> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsShieldedTRC20ContractNoteSpentInterceptors() ?? []
    )
  }

  /// Unary call to GetTriggerInputForShieldedTRC20Contract
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTriggerInputForShieldedTRC20Contract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTriggerInputForShieldedTRC20Contract(
    _ request: Protocol_ShieldedTRC20TriggerContractParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_ShieldedTRC20TriggerContractParameters, Protocol_BytesMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTriggerInputForShieldedTRC20ContractInterceptors() ?? []
    )
  }

  /// Unary call to CreateCommonTransaction
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCommonTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCommonTransaction(
    _ request: Protocol_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Transaction, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/CreateCommonTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCommonTransactionInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionInfoByBlockNum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionInfoByBlockNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionInfoByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_TransactionInfoList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionInfoByBlockNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionInfoByBlockNumInterceptors() ?? []
    )
  }

  /// Unary call to GetBurnTrx
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBurnTrx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBurnTrx(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetBurnTrx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBurnTrxInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionFromPending
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionFromPending.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionFromPending(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionFromPending",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionFromPendingInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionListFromPending
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionListFromPending.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionListFromPending(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_TransactionIdList> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetTransactionListFromPending",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionListFromPendingInterceptors() ?? []
    )
  }

  /// Unary call to GetPendingSize
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPendingSize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPendingSize(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.Wallet/GetPendingSize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingSizeInterceptors() ?? []
    )
  }
}

internal protocol Protocol_WalletClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getAccount'.
  func makeGetAccountInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when invoking 'getAccountById'.
  func makeGetAccountByIdInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when invoking 'getAccountBalance'.
  func makeGetAccountBalanceInterceptors() -> [ClientInterceptor<Protocol_AccountBalanceRequest, Protocol_AccountBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockBalanceTrace'.
  func makeGetBlockBalanceTraceInterceptors() -> [ClientInterceptor<Protocol_BlockBalanceTrace.BlockIdentifier, Protocol_BlockBalanceTrace>]

  /// - Returns: Interceptors to use when invoking 'createTransaction'.
  func makeCreateTransactionInterceptors() -> [ClientInterceptor<Protocol_TransferContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'createTransaction2'.
  func makeCreateTransaction2Interceptors() -> [ClientInterceptor<Protocol_TransferContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'broadcastTransaction'.
  func makeBroadcastTransactionInterceptors() -> [ClientInterceptor<Protocol_Transaction, Protocol_Return>]

  /// - Returns: Interceptors to use when invoking 'updateAccount'.
  func makeUpdateAccountInterceptors() -> [ClientInterceptor<Protocol_AccountUpdateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'setAccountId'.
  func makeSetAccountIdInterceptors() -> [ClientInterceptor<Protocol_SetAccountIdContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'updateAccount2'.
  func makeUpdateAccount2Interceptors() -> [ClientInterceptor<Protocol_AccountUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'voteWitnessAccount'.
  func makeVoteWitnessAccountInterceptors() -> [ClientInterceptor<Protocol_VoteWitnessContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'updateSetting'.
  func makeUpdateSettingInterceptors() -> [ClientInterceptor<Protocol_UpdateSettingContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'updateEnergyLimit'.
  func makeUpdateEnergyLimitInterceptors() -> [ClientInterceptor<Protocol_UpdateEnergyLimitContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'voteWitnessAccount2'.
  func makeVoteWitnessAccount2Interceptors() -> [ClientInterceptor<Protocol_VoteWitnessContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'createAssetIssue'.
  func makeCreateAssetIssueInterceptors() -> [ClientInterceptor<Protocol_AssetIssueContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'createAssetIssue2'.
  func makeCreateAssetIssue2Interceptors() -> [ClientInterceptor<Protocol_AssetIssueContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'updateWitness'.
  func makeUpdateWitnessInterceptors() -> [ClientInterceptor<Protocol_WitnessUpdateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'updateWitness2'.
  func makeUpdateWitness2Interceptors() -> [ClientInterceptor<Protocol_WitnessUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makeCreateAccountInterceptors() -> [ClientInterceptor<Protocol_AccountCreateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'createAccount2'.
  func makeCreateAccount2Interceptors() -> [ClientInterceptor<Protocol_AccountCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'createWitness'.
  func makeCreateWitnessInterceptors() -> [ClientInterceptor<Protocol_WitnessCreateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'createWitness2'.
  func makeCreateWitness2Interceptors() -> [ClientInterceptor<Protocol_WitnessCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'transferAsset'.
  func makeTransferAssetInterceptors() -> [ClientInterceptor<Protocol_TransferAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'transferAsset2'.
  func makeTransferAsset2Interceptors() -> [ClientInterceptor<Protocol_TransferAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'participateAssetIssue'.
  func makeParticipateAssetIssueInterceptors() -> [ClientInterceptor<Protocol_ParticipateAssetIssueContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'participateAssetIssue2'.
  func makeParticipateAssetIssue2Interceptors() -> [ClientInterceptor<Protocol_ParticipateAssetIssueContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'freezeBalance'.
  func makeFreezeBalanceInterceptors() -> [ClientInterceptor<Protocol_FreezeBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'freezeBalance2'.
  func makeFreezeBalance2Interceptors() -> [ClientInterceptor<Protocol_FreezeBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'unfreezeBalance'.
  func makeUnfreezeBalanceInterceptors() -> [ClientInterceptor<Protocol_UnfreezeBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'unfreezeBalance2'.
  func makeUnfreezeBalance2Interceptors() -> [ClientInterceptor<Protocol_UnfreezeBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'unfreezeAsset'.
  func makeUnfreezeAssetInterceptors() -> [ClientInterceptor<Protocol_UnfreezeAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'unfreezeAsset2'.
  func makeUnfreezeAsset2Interceptors() -> [ClientInterceptor<Protocol_UnfreezeAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'withdrawBalance'.
  func makeWithdrawBalanceInterceptors() -> [ClientInterceptor<Protocol_WithdrawBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'withdrawBalance2'.
  func makeWithdrawBalance2Interceptors() -> [ClientInterceptor<Protocol_WithdrawBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'updateAsset'.
  func makeUpdateAssetInterceptors() -> [ClientInterceptor<Protocol_UpdateAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'updateAsset2'.
  func makeUpdateAsset2Interceptors() -> [ClientInterceptor<Protocol_UpdateAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'proposalCreate'.
  func makeProposalCreateInterceptors() -> [ClientInterceptor<Protocol_ProposalCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'proposalApprove'.
  func makeProposalApproveInterceptors() -> [ClientInterceptor<Protocol_ProposalApproveContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'proposalDelete'.
  func makeProposalDeleteInterceptors() -> [ClientInterceptor<Protocol_ProposalDeleteContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'buyStorage'.
  func makeBuyStorageInterceptors() -> [ClientInterceptor<Protocol_BuyStorageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'buyStorageBytes'.
  func makeBuyStorageBytesInterceptors() -> [ClientInterceptor<Protocol_BuyStorageBytesContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'sellStorage'.
  func makeSellStorageInterceptors() -> [ClientInterceptor<Protocol_SellStorageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'exchangeCreate'.
  func makeExchangeCreateInterceptors() -> [ClientInterceptor<Protocol_ExchangeCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'exchangeInject'.
  func makeExchangeInjectInterceptors() -> [ClientInterceptor<Protocol_ExchangeInjectContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'exchangeWithdraw'.
  func makeExchangeWithdrawInterceptors() -> [ClientInterceptor<Protocol_ExchangeWithdrawContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'exchangeTransaction'.
  func makeExchangeTransactionInterceptors() -> [ClientInterceptor<Protocol_ExchangeTransactionContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'marketSellAsset'.
  func makeMarketSellAssetInterceptors() -> [ClientInterceptor<Protocol_MarketSellAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'marketCancelOrder'.
  func makeMarketCancelOrderInterceptors() -> [ClientInterceptor<Protocol_MarketCancelOrderContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderById'.
  func makeGetMarketOrderByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_MarketOrder>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderByAccount'.
  func makeGetMarketOrderByAccountInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when invoking 'getMarketPriceByPair'.
  func makeGetMarketPriceByPairInterceptors() -> [ClientInterceptor<Protocol_MarketOrderPair, Protocol_MarketPriceList>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderListByPair'.
  func makeGetMarketOrderListByPairInterceptors() -> [ClientInterceptor<Protocol_MarketOrderPair, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when invoking 'getMarketPairList'.
  func makeGetMarketPairListInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_MarketOrderPairList>]

  /// - Returns: Interceptors to use when invoking 'listNodes'.
  func makeListNodesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NodeList>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueByAccount'.
  func makeGetAssetIssueByAccountInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getAccountNet'.
  func makeGetAccountNetInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_AccountNetMessage>]

  /// - Returns: Interceptors to use when invoking 'getAccountResource'.
  func makeGetAccountResourceInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_AccountResourceMessage>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueByName'.
  func makeGetAssetIssueByNameInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueListByName'.
  func makeGetAssetIssueListByNameInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueById'.
  func makeGetAssetIssueByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when invoking 'getNowBlock'.
  func makeGetNowBlockInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getNowBlock2'.
  func makeGetNowBlock2Interceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when invoking 'getBlockByNum'.
  func makeGetBlockByNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getBlockByNum2'.
  func makeGetBlockByNum2Interceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionCountByBlockNum'.
  func makeGetTransactionCountByBlockNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getBlockById'.
  func makeGetBlockByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getBlockByLimitNext'.
  func makeGetBlockByLimitNextInterceptors() -> [ClientInterceptor<Protocol_BlockLimit, Protocol_BlockList>]

  /// - Returns: Interceptors to use when invoking 'getBlockByLimitNext2'.
  func makeGetBlockByLimitNext2Interceptors() -> [ClientInterceptor<Protocol_BlockLimit, Protocol_BlockListExtention>]

  /// - Returns: Interceptors to use when invoking 'getBlockByLatestNum'.
  func makeGetBlockByLatestNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_BlockList>]

  /// - Returns: Interceptors to use when invoking 'getBlockByLatestNum2'.
  func makeGetBlockByLatestNum2Interceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_BlockListExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionById'.
  func makeGetTransactionByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'deployContract'.
  func makeDeployContractInterceptors() -> [ClientInterceptor<Protocol_CreateSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getContract'.
  func makeGetContractInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_SmartContract>]

  /// - Returns: Interceptors to use when invoking 'getContractInfo'.
  func makeGetContractInfoInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_SmartContractDataWrapper>]

  /// - Returns: Interceptors to use when invoking 'triggerContract'.
  func makeTriggerContractInterceptors() -> [ClientInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'triggerConstantContract'.
  func makeTriggerConstantContractInterceptors() -> [ClientInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'clearContractABI'.
  func makeClearContractABIInterceptors() -> [ClientInterceptor<Protocol_ClearABIContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'listWitnesses'.
  func makeListWitnessesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_WitnessList>]

  /// - Returns: Interceptors to use when invoking 'getDelegatedResource'.
  func makeGetDelegatedResourceInterceptors() -> [ClientInterceptor<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>]

  /// - Returns: Interceptors to use when invoking 'getDelegatedResourceAccountIndex'.
  func makeGetDelegatedResourceAccountIndexInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>]

  /// - Returns: Interceptors to use when invoking 'listProposals'.
  func makeListProposalsInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_ProposalList>]

  /// - Returns: Interceptors to use when invoking 'getPaginatedProposalList'.
  func makeGetPaginatedProposalListInterceptors() -> [ClientInterceptor<Protocol_PaginatedMessage, Protocol_ProposalList>]

  /// - Returns: Interceptors to use when invoking 'getProposalById'.
  func makeGetProposalByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Proposal>]

  /// - Returns: Interceptors to use when invoking 'listExchanges'.
  func makeListExchangesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when invoking 'getPaginatedExchangeList'.
  func makeGetPaginatedExchangeListInterceptors() -> [ClientInterceptor<Protocol_PaginatedMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when invoking 'getExchangeById'.
  func makeGetExchangeByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Exchange>]

  /// - Returns: Interceptors to use when invoking 'getChainParameters'.
  func makeGetChainParametersInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_ChainParameters>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueList'.
  func makeGetAssetIssueListInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getPaginatedAssetIssueList'.
  func makeGetPaginatedAssetIssueListInterceptors() -> [ClientInterceptor<Protocol_PaginatedMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'totalTransaction'.
  func makeTotalTransactionInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getNextMaintenanceTime'.
  func makeGetNextMaintenanceTimeInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getTransactionSign'.
  func makeGetTransactionSignInterceptors() -> [ClientInterceptor<Protocol_TransactionSign, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'getTransactionSign2'.
  func makeGetTransactionSign2Interceptors() -> [ClientInterceptor<Protocol_TransactionSign, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'createAddress'.
  func makeCreateAddressInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'easyTransferAsset'.
  func makeEasyTransferAssetInterceptors() -> [ClientInterceptor<Protocol_EasyTransferAssetMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'easyTransferAssetByPrivate'.
  func makeEasyTransferAssetByPrivateInterceptors() -> [ClientInterceptor<Protocol_EasyTransferAssetByPrivateMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'easyTransfer'.
  func makeEasyTransferInterceptors() -> [ClientInterceptor<Protocol_EasyTransferMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'easyTransferByPrivate'.
  func makeEasyTransferByPrivateInterceptors() -> [ClientInterceptor<Protocol_EasyTransferByPrivateMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'generateAddress'.
  func makeGenerateAddressInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>]

  /// - Returns: Interceptors to use when invoking 'getTransactionInfoById'.
  func makeGetTransactionInfoByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_TransactionInfo>]

  /// - Returns: Interceptors to use when invoking 'accountPermissionUpdate'.
  func makeAccountPermissionUpdateInterceptors() -> [ClientInterceptor<Protocol_AccountPermissionUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'addSign'.
  func makeAddSignInterceptors() -> [ClientInterceptor<Protocol_TransactionSign, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionSignWeight'.
  func makeGetTransactionSignWeightInterceptors() -> [ClientInterceptor<Protocol_Transaction, Protocol_TransactionSignWeight>]

  /// - Returns: Interceptors to use when invoking 'getTransactionApprovedList'.
  func makeGetTransactionApprovedListInterceptors() -> [ClientInterceptor<Protocol_Transaction, Protocol_TransactionApprovedList>]

  /// - Returns: Interceptors to use when invoking 'getNodeInfo'.
  func makeGetNodeInfoInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NodeInfo>]

  /// - Returns: Interceptors to use when invoking 'getRewardInfo'.
  func makeGetRewardInfoInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getBrokerageInfo'.
  func makeGetBrokerageInfoInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'updateBrokerage'.
  func makeUpdateBrokerageInterceptors() -> [ClientInterceptor<Protocol_UpdateBrokerageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'createShieldedTransaction'.
  func makeCreateShieldedTransactionInterceptors() -> [ClientInterceptor<Protocol_PrivateParameters, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getMerkleTreeVoucherInfo'.
  func makeGetMerkleTreeVoucherInfoInterceptors() -> [ClientInterceptor<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>]

  /// - Returns: Interceptors to use when invoking 'scanNoteByIvk'.
  func makeScanNoteByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when invoking 'scanAndMarkNoteByIvk'.
  func makeScanAndMarkNoteByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>]

  /// - Returns: Interceptors to use when invoking 'scanNoteByOvk'.
  func makeScanNoteByOvkInterceptors() -> [ClientInterceptor<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when invoking 'getSpendingKey'.
  func makeGetSpendingKeyInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'getExpandedSpendingKey'.
  func makeGetExpandedSpendingKeyInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_ExpandedSpendingKeyMessage>]

  /// - Returns: Interceptors to use when invoking 'getAkFromAsk'.
  func makeGetAkFromAskInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'getNkFromNsk'.
  func makeGetNkFromNskInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'getIncomingViewingKey'.
  func makeGetIncomingViewingKeyInterceptors() -> [ClientInterceptor<Protocol_ViewingKeyMessage, Protocol_IncomingViewingKeyMessage>]

  /// - Returns: Interceptors to use when invoking 'getDiversifier'.
  func makeGetDiversifierInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_DiversifierMessage>]

  /// - Returns: Interceptors to use when invoking 'getNewShieldedAddress'.
  func makeGetNewShieldedAddressInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_ShieldedAddressInfo>]

  /// - Returns: Interceptors to use when invoking 'getZenPaymentAddress'.
  func makeGetZenPaymentAddressInterceptors() -> [ClientInterceptor<Protocol_IncomingViewingKeyDiversifierMessage, Protocol_PaymentAddressMessage>]

  /// - Returns: Interceptors to use when invoking 'getRcm'.
  func makeGetRcmInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'isSpend'.
  func makeIsSpendInterceptors() -> [ClientInterceptor<Protocol_NoteParameters, Protocol_SpendResult>]

  /// - Returns: Interceptors to use when invoking 'createShieldedTransactionWithoutSpendAuthSig'.
  func makeCreateShieldedTransactionWithoutSpendAuthSigInterceptors() -> [ClientInterceptor<Protocol_PrivateParametersWithoutAsk, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getShieldTransactionHash'.
  func makeGetShieldTransactionHashInterceptors() -> [ClientInterceptor<Protocol_Transaction, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'createSpendAuthSig'.
  func makeCreateSpendAuthSigInterceptors() -> [ClientInterceptor<Protocol_SpendAuthSigParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'createShieldNullifier'.
  func makeCreateShieldNullifierInterceptors() -> [ClientInterceptor<Protocol_NfParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'createShieldedContractParameters'.
  func makeCreateShieldedContractParametersInterceptors() -> [ClientInterceptor<Protocol_PrivateShieldedTRC20Parameters, Protocol_ShieldedTRC20Parameters>]

  /// - Returns: Interceptors to use when invoking 'createShieldedContractParametersWithoutAsk'.
  func makeCreateShieldedContractParametersWithoutAskInterceptors() -> [ClientInterceptor<Protocol_PrivateShieldedTRC20ParametersWithoutAsk, Protocol_ShieldedTRC20Parameters>]

  /// - Returns: Interceptors to use when invoking 'scanShieldedTRC20NotesByIvk'.
  func makeScanShieldedTRC20NotesByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when invoking 'scanShieldedTRC20NotesByOvk'.
  func makeScanShieldedTRC20NotesByOvkInterceptors() -> [ClientInterceptor<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when invoking 'isShieldedTRC20ContractNoteSpent'.
  func makeIsShieldedTRC20ContractNoteSpentInterceptors() -> [ClientInterceptor<Protocol_NfTRC20Parameters, Protocol_NullifierResult>]

  /// - Returns: Interceptors to use when invoking 'getTriggerInputForShieldedTRC20Contract'.
  func makeGetTriggerInputForShieldedTRC20ContractInterceptors() -> [ClientInterceptor<Protocol_ShieldedTRC20TriggerContractParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when invoking 'createCommonTransaction'.
  func makeCreateCommonTransactionInterceptors() -> [ClientInterceptor<Protocol_Transaction, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionInfoByBlockNum'.
  func makeGetTransactionInfoByBlockNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_TransactionInfoList>]

  /// - Returns: Interceptors to use when invoking 'getBurnTrx'.
  func makeGetBurnTrxInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getTransactionFromPending'.
  func makeGetTransactionFromPendingInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'getTransactionListFromPending'.
  func makeGetTransactionListFromPendingInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_TransactionIdList>]

  /// - Returns: Interceptors to use when invoking 'getPendingSize'.
  func makeGetPendingSizeInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]
}

internal final class Protocol_WalletClient: Protocol_WalletClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_WalletClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.Wallet service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_WalletClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Protocol_WalletSolidityClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_WalletSolidityClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_WalletSolidityClientInterceptorFactoryProtocol? { get }

  func getAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_Account>

  func getAccountById(
    _ request: Protocol_Account,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_Account, Protocol_Account>

  func listWitnesses(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_WitnessList>

  func getAssetIssueList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AssetIssueList>

  func getPaginatedAssetIssueList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_AssetIssueList>

  func getAssetIssueByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract>

  func getAssetIssueListByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueList>

  func getAssetIssueById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract>

  func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block>

  func getNowBlock2(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockExtention>

  func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block>

  func getBlockByNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockExtention>

  func getTransactionCountByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_NumberMessage>

  func getDelegatedResource(
    _ request: Protocol_DelegatedResourceMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>

  func getDelegatedResourceAccountIndex(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>

  func getExchangeById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Exchange>

  func listExchanges(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ExchangeList>

  func getTransactionById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction>

  func getTransactionInfoById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_TransactionInfo>

  func generateAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>

  func getMerkleTreeVoucherInfo(
    _ request: Protocol_OutputPointInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>

  func scanNoteByIvk(
    _ request: Protocol_IvkDecryptParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>

  func scanAndMarkNoteByIvk(
    _ request: Protocol_IvkDecryptAndMarkParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>

  func scanNoteByOvk(
    _ request: Protocol_OvkDecryptParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>

  func isSpend(
    _ request: Protocol_NoteParameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NoteParameters, Protocol_SpendResult>

  func scanShieldedTRC20NotesByIvk(
    _ request: Protocol_IvkDecryptTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>

  func scanShieldedTRC20NotesByOvk(
    _ request: Protocol_OvkDecryptTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>

  func isShieldedTRC20ContractNoteSpent(
    _ request: Protocol_NfTRC20Parameters,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NfTRC20Parameters, Protocol_NullifierResult>

  func getRewardInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage>

  func getBrokerageInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage>

  func triggerConstantContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention>

  func getTransactionInfoByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_TransactionInfoList>

  func getMarketOrderById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrder>

  func getMarketOrderByAccount(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrderList>

  func getMarketPriceByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketPriceList>

  func getMarketOrderListByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketOrderList>

  func getMarketPairList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MarketOrderPairList>

  func getBurnTrx(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage>
}

extension Protocol_WalletSolidityClientProtocol {
  internal var serviceName: String {
    return "protocol.WalletSolidity"
  }

  /// Unary call to GetAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccount(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_Account> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetAccountById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountById(
    _ request: Protocol_Account,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_Account, Protocol_Account> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAccountById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountByIdInterceptors() ?? []
    )
  }

  /// Unary call to ListWitnesses
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWitnesses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listWitnesses(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_WitnessList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ListWitnesses",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListWitnessesInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAssetIssueList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueListInterceptors() ?? []
    )
  }

  /// Unary call to GetPaginatedAssetIssueList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaginatedAssetIssueList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaginatedAssetIssueList(
    _ request: Protocol_PaginatedMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_PaginatedMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetPaginatedAssetIssueList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaginatedAssetIssueListInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueByName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAssetIssueByName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueByNameInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueListByName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueListByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueListByName(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAssetIssueListByName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueListByNameInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetIssueById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetIssueById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetIssueById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_AssetIssueContract> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetAssetIssueById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetIssueByIdInterceptors() ?? []
    )
  }

  ///Please use GetNowBlock2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNowBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetNowBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? []
    )
  }

  ///Use this function instead of GetNowBlock.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNowBlock2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNowBlock2(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockExtention> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetNowBlock2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNowBlock2Interceptors() ?? []
    )
  }

  ///Please use GetBlockByNum2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetBlockByNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? []
    )
  }

  ///Use this function instead of GetBlockByNum.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByNum2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByNum2(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_BlockExtention> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetBlockByNum2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByNum2Interceptors() ?? []
    )
  }

  /// Unary call to GetTransactionCountByBlockNum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionCountByBlockNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionCountByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetTransactionCountByBlockNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionCountByBlockNumInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegatedResource
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegatedResource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegatedResource(
    _ request: Protocol_DelegatedResourceMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetDelegatedResource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegatedResourceInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegatedResourceAccountIndex
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegatedResourceAccountIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegatedResourceAccountIndex(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetDelegatedResourceAccountIndex",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegatedResourceAccountIndexInterceptors() ?? []
    )
  }

  /// Unary call to GetExchangeById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExchangeById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExchangeById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Exchange> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetExchangeById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExchangeByIdInterceptors() ?? []
    )
  }

  /// Unary call to ListExchanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExchanges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExchanges(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_ExchangeList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ListExchanges",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExchangesInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_Transaction> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetTransactionById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionByIdInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionInfoById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionInfoById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionInfoById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_TransactionInfo> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetTransactionInfoById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionInfoByIdInterceptors() ?? []
    )
  }

  ///Warning: do not invoke this interface provided by others.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateAddress(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GenerateAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateAddressInterceptors() ?? []
    )
  }

  /// Unary call to GetMerkleTreeVoucherInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMerkleTreeVoucherInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMerkleTreeVoucherInfo(
    _ request: Protocol_OutputPointInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMerkleTreeVoucherInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMerkleTreeVoucherInfoInterceptors() ?? []
    )
  }

  /// Unary call to ScanNoteByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanNoteByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanNoteByIvk(
    _ request: Protocol_IvkDecryptParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptParameters, Protocol_DecryptNotes> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ScanNoteByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanNoteByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanAndMarkNoteByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanAndMarkNoteByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanAndMarkNoteByIvk(
    _ request: Protocol_IvkDecryptAndMarkParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ScanAndMarkNoteByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanAndMarkNoteByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanNoteByOvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanNoteByOvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanNoteByOvk(
    _ request: Protocol_OvkDecryptParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OvkDecryptParameters, Protocol_DecryptNotes> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ScanNoteByOvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanNoteByOvkInterceptors() ?? []
    )
  }

  /// Unary call to IsSpend
  ///
  /// - Parameters:
  ///   - request: Request to send to IsSpend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isSpend(
    _ request: Protocol_NoteParameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NoteParameters, Protocol_SpendResult> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/IsSpend",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsSpendInterceptors() ?? []
    )
  }

  /// Unary call to ScanShieldedTRC20NotesByIvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanShieldedTRC20NotesByIvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanShieldedTRC20NotesByIvk(
    _ request: Protocol_IvkDecryptTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ScanShieldedTRC20NotesByIvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanShieldedTRC20NotesByIvkInterceptors() ?? []
    )
  }

  /// Unary call to ScanShieldedTRC20NotesByOvk
  ///
  /// - Parameters:
  ///   - request: Request to send to ScanShieldedTRC20NotesByOvk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scanShieldedTRC20NotesByOvk(
    _ request: Protocol_OvkDecryptTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/ScanShieldedTRC20NotesByOvk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanShieldedTRC20NotesByOvkInterceptors() ?? []
    )
  }

  /// Unary call to IsShieldedTRC20ContractNoteSpent
  ///
  /// - Parameters:
  ///   - request: Request to send to IsShieldedTRC20ContractNoteSpent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isShieldedTRC20ContractNoteSpent(
    _ request: Protocol_NfTRC20Parameters,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NfTRC20Parameters, Protocol_NullifierResult> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/IsShieldedTRC20ContractNoteSpent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsShieldedTRC20ContractNoteSpentInterceptors() ?? []
    )
  }

  /// Unary call to GetRewardInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRewardInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRewardInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetRewardInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRewardInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetBrokerageInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBrokerageInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBrokerageInfo(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetBrokerageInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBrokerageInfoInterceptors() ?? []
    )
  }

  /// Unary call to TriggerConstantContract
  ///
  /// - Parameters:
  ///   - request: Request to send to TriggerConstantContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func triggerConstantContract(
    _ request: Protocol_TriggerSmartContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_TriggerSmartContract, Protocol_TransactionExtention> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/TriggerConstantContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTriggerConstantContractInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactionInfoByBlockNum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionInfoByBlockNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionInfoByBlockNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_TransactionInfoList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetTransactionInfoByBlockNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionInfoByBlockNumInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderById
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderById(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrder> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMarketOrderById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderByIdInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderByAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderByAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderByAccount(
    _ request: Protocol_BytesMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_BytesMessage, Protocol_MarketOrderList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMarketOrderByAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderByAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketPriceByPair
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketPriceByPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketPriceByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketPriceList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMarketPriceByPair",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketPriceByPairInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketOrderListByPair
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketOrderListByPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketOrderListByPair(
    _ request: Protocol_MarketOrderPair,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_MarketOrderPair, Protocol_MarketOrderList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMarketOrderListByPair",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketOrderListByPairInterceptors() ?? []
    )
  }

  /// Unary call to GetMarketPairList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketPairList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMarketPairList(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MarketOrderPairList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetMarketPairList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketPairListInterceptors() ?? []
    )
  }

  /// Unary call to GetBurnTrx
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBurnTrx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBurnTrx(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_NumberMessage> {
    return self.makeUnaryCall(
      path: "/protocol.WalletSolidity/GetBurnTrx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBurnTrxInterceptors() ?? []
    )
  }
}

internal protocol Protocol_WalletSolidityClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getAccount'.
  func makeGetAccountInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when invoking 'getAccountById'.
  func makeGetAccountByIdInterceptors() -> [ClientInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when invoking 'listWitnesses'.
  func makeListWitnessesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_WitnessList>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueList'.
  func makeGetAssetIssueListInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getPaginatedAssetIssueList'.
  func makeGetPaginatedAssetIssueListInterceptors() -> [ClientInterceptor<Protocol_PaginatedMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueByName'.
  func makeGetAssetIssueByNameInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueListByName'.
  func makeGetAssetIssueListByNameInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when invoking 'getAssetIssueById'.
  func makeGetAssetIssueByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when invoking 'getNowBlock'.
  func makeGetNowBlockInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getNowBlock2'.
  func makeGetNowBlock2Interceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when invoking 'getBlockByNum'.
  func makeGetBlockByNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getBlockByNum2'.
  func makeGetBlockByNum2Interceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionCountByBlockNum'.
  func makeGetTransactionCountByBlockNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getDelegatedResource'.
  func makeGetDelegatedResourceInterceptors() -> [ClientInterceptor<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>]

  /// - Returns: Interceptors to use when invoking 'getDelegatedResourceAccountIndex'.
  func makeGetDelegatedResourceAccountIndexInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>]

  /// - Returns: Interceptors to use when invoking 'getExchangeById'.
  func makeGetExchangeByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Exchange>]

  /// - Returns: Interceptors to use when invoking 'listExchanges'.
  func makeListExchangesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when invoking 'getTransactionById'.
  func makeGetTransactionByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when invoking 'getTransactionInfoById'.
  func makeGetTransactionInfoByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_TransactionInfo>]

  /// - Returns: Interceptors to use when invoking 'generateAddress'.
  func makeGenerateAddressInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>]

  /// - Returns: Interceptors to use when invoking 'getMerkleTreeVoucherInfo'.
  func makeGetMerkleTreeVoucherInfoInterceptors() -> [ClientInterceptor<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>]

  /// - Returns: Interceptors to use when invoking 'scanNoteByIvk'.
  func makeScanNoteByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when invoking 'scanAndMarkNoteByIvk'.
  func makeScanAndMarkNoteByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>]

  /// - Returns: Interceptors to use when invoking 'scanNoteByOvk'.
  func makeScanNoteByOvkInterceptors() -> [ClientInterceptor<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when invoking 'isSpend'.
  func makeIsSpendInterceptors() -> [ClientInterceptor<Protocol_NoteParameters, Protocol_SpendResult>]

  /// - Returns: Interceptors to use when invoking 'scanShieldedTRC20NotesByIvk'.
  func makeScanShieldedTRC20NotesByIvkInterceptors() -> [ClientInterceptor<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when invoking 'scanShieldedTRC20NotesByOvk'.
  func makeScanShieldedTRC20NotesByOvkInterceptors() -> [ClientInterceptor<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when invoking 'isShieldedTRC20ContractNoteSpent'.
  func makeIsShieldedTRC20ContractNoteSpentInterceptors() -> [ClientInterceptor<Protocol_NfTRC20Parameters, Protocol_NullifierResult>]

  /// - Returns: Interceptors to use when invoking 'getRewardInfo'.
  func makeGetRewardInfoInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'getBrokerageInfo'.
  func makeGetBrokerageInfoInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when invoking 'triggerConstantContract'.
  func makeTriggerConstantContractInterceptors() -> [ClientInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionInfoByBlockNum'.
  func makeGetTransactionInfoByBlockNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_TransactionInfoList>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderById'.
  func makeGetMarketOrderByIdInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_MarketOrder>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderByAccount'.
  func makeGetMarketOrderByAccountInterceptors() -> [ClientInterceptor<Protocol_BytesMessage, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when invoking 'getMarketPriceByPair'.
  func makeGetMarketPriceByPairInterceptors() -> [ClientInterceptor<Protocol_MarketOrderPair, Protocol_MarketPriceList>]

  /// - Returns: Interceptors to use when invoking 'getMarketOrderListByPair'.
  func makeGetMarketOrderListByPairInterceptors() -> [ClientInterceptor<Protocol_MarketOrderPair, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when invoking 'getMarketPairList'.
  func makeGetMarketPairListInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_MarketOrderPairList>]

  /// - Returns: Interceptors to use when invoking 'getBurnTrx'.
  func makeGetBurnTrxInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]
}

internal final class Protocol_WalletSolidityClient: Protocol_WalletSolidityClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_WalletSolidityClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.WalletSolidity service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_WalletSolidityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Protocol_WalletExtensionClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_WalletExtensionClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_WalletExtensionClientInterceptorFactoryProtocol? { get }

  func getTransactionsFromThis(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionList>

  func getTransactionsFromThis2(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionListExtention>

  func getTransactionsToThis(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionList>

  func getTransactionsToThis2(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionListExtention>
}

extension Protocol_WalletExtensionClientProtocol {
  internal var serviceName: String {
    return "protocol.WalletExtension"
  }

  ///Please use GetTransactionsFromThis2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionsFromThis.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionsFromThis(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletExtension/GetTransactionsFromThis",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionsFromThisInterceptors() ?? []
    )
  }

  ///Use this function instead of GetTransactionsFromThis.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionsFromThis2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionsFromThis2(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionListExtention> {
    return self.makeUnaryCall(
      path: "/protocol.WalletExtension/GetTransactionsFromThis2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionsFromThis2Interceptors() ?? []
    )
  }

  ///Please use GetTransactionsToThis2 instead of this function.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionsToThis.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionsToThis(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionList> {
    return self.makeUnaryCall(
      path: "/protocol.WalletExtension/GetTransactionsToThis",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionsToThisInterceptors() ?? []
    )
  }

  ///Use this function instead of GetTransactionsToThis.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactionsToThis2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionsToThis2(
    _ request: Protocol_AccountPaginated,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_AccountPaginated, Protocol_TransactionListExtention> {
    return self.makeUnaryCall(
      path: "/protocol.WalletExtension/GetTransactionsToThis2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionsToThis2Interceptors() ?? []
    )
  }
}

internal protocol Protocol_WalletExtensionClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getTransactionsFromThis'.
  func makeGetTransactionsFromThisInterceptors() -> [ClientInterceptor<Protocol_AccountPaginated, Protocol_TransactionList>]

  /// - Returns: Interceptors to use when invoking 'getTransactionsFromThis2'.
  func makeGetTransactionsFromThis2Interceptors() -> [ClientInterceptor<Protocol_AccountPaginated, Protocol_TransactionListExtention>]

  /// - Returns: Interceptors to use when invoking 'getTransactionsToThis'.
  func makeGetTransactionsToThisInterceptors() -> [ClientInterceptor<Protocol_AccountPaginated, Protocol_TransactionList>]

  /// - Returns: Interceptors to use when invoking 'getTransactionsToThis2'.
  func makeGetTransactionsToThis2Interceptors() -> [ClientInterceptor<Protocol_AccountPaginated, Protocol_TransactionListExtention>]
}

internal final class Protocol_WalletExtensionClient: Protocol_WalletExtensionClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_WalletExtensionClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.WalletExtension service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_WalletExtensionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// the api of tron's db
///
/// Usage: instantiate `Protocol_DatabaseClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_DatabaseClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_DatabaseClientInterceptorFactoryProtocol? { get }

  func getBlockReference(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockReference>

  func getDynamicProperties(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_DynamicProperties>

  func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block>

  func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block>
}

extension Protocol_DatabaseClientProtocol {
  internal var serviceName: String {
    return "protocol.Database"
  }

  /// for tapos
  ///
  /// - Parameters:
  ///   - request: Request to send to getBlockReference.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockReference(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_BlockReference> {
    return self.makeUnaryCall(
      path: "/protocol.Database/getBlockReference",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetBlockReferenceInterceptors() ?? []
    )
  }

  /// Unary call to GetDynamicProperties
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDynamicProperties.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDynamicProperties(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_DynamicProperties> {
    return self.makeUnaryCall(
      path: "/protocol.Database/GetDynamicProperties",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDynamicPropertiesInterceptors() ?? []
    )
  }

  /// Unary call to GetNowBlock
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNowBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNowBlock(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.Database/GetNowBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? []
    )
  }

  /// Unary call to GetBlockByNum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockByNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockByNum(
    _ request: Protocol_NumberMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_NumberMessage, Protocol_Block> {
    return self.makeUnaryCall(
      path: "/protocol.Database/GetBlockByNum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? []
    )
  }
}

internal protocol Protocol_DatabaseClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getBlockReference'.
  func makegetBlockReferenceInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_BlockReference>]

  /// - Returns: Interceptors to use when invoking 'getDynamicProperties'.
  func makeGetDynamicPropertiesInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_DynamicProperties>]

  /// - Returns: Interceptors to use when invoking 'getNowBlock'.
  func makeGetNowBlockInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when invoking 'getBlockByNum'.
  func makeGetBlockByNumInterceptors() -> [ClientInterceptor<Protocol_NumberMessage, Protocol_Block>]
}

internal final class Protocol_DatabaseClient: Protocol_DatabaseClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_DatabaseClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.Database service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_DatabaseClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Protocol_MonitorClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_MonitorClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_MonitorClientInterceptorFactoryProtocol? { get }

  func getStatsInfo(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MetricsInfo>
}

extension Protocol_MonitorClientProtocol {
  internal var serviceName: String {
    return "protocol.Monitor"
  }

  /// Unary call to GetStatsInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getStatsInfo(
    _ request: Protocol_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Protocol_EmptyMessage, Protocol_MetricsInfo> {
    return self.makeUnaryCall(
      path: "/protocol.Monitor/GetStatsInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatsInfoInterceptors() ?? []
    )
  }
}

internal protocol Protocol_MonitorClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getStatsInfo'.
  func makeGetStatsInfoInterceptors() -> [ClientInterceptor<Protocol_EmptyMessage, Protocol_MetricsInfo>]
}

internal final class Protocol_MonitorClient: Protocol_MonitorClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_MonitorClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.Monitor service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_MonitorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// the api of tron's network such as node list.
///
/// Usage: instantiate `Protocol_NetworkClient`, then call methods of this protocol to make API calls.
internal protocol Protocol_NetworkClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Protocol_NetworkClientInterceptorFactoryProtocol? { get }
}

extension Protocol_NetworkClientProtocol {
  internal var serviceName: String {
    return "protocol.Network"
  }
}

internal protocol Protocol_NetworkClientInterceptorFactoryProtocol {
}

internal final class Protocol_NetworkClient: Protocol_NetworkClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Protocol_NetworkClientInterceptorFactoryProtocol?

  /// Creates a client for the protocol.Network service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Protocol_NetworkClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_WalletProvider: CallHandlerProvider {
  var interceptors: Protocol_WalletServerInterceptorFactoryProtocol? { get }

  func getAccount(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Account>

  func getAccountById(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Account>

  func getAccountBalance(request: Protocol_AccountBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AccountBalanceResponse>

  func getBlockBalanceTrace(request: Protocol_BlockBalanceTrace.BlockIdentifier, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockBalanceTrace>

  ///Please use CreateTransaction2 instead of this function.
  func createTransaction(request: Protocol_TransferContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of CreateTransaction.
  func createTransaction2(request: Protocol_TransferContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func broadcastTransaction(request: Protocol_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Return>

  ///Please use UpdateAccount2 instead of this function.
  func updateAccount(request: Protocol_AccountUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  func setAccountId(request: Protocol_SetAccountIdContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of UpdateAccount.
  func updateAccount2(request: Protocol_AccountUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use VoteWitnessAccount2 instead of this function.
  func voteWitnessAccount(request: Protocol_VoteWitnessContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///modify the consume_user_resource_percent
  func updateSetting(request: Protocol_UpdateSettingContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///modify the energy_limit
  func updateEnergyLimit(request: Protocol_UpdateEnergyLimitContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Use this function instead of VoteWitnessAccount.
  func voteWitnessAccount2(request: Protocol_VoteWitnessContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use CreateAssetIssue2 instead of this function.
  func createAssetIssue(request: Protocol_AssetIssueContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of CreateAssetIssue.
  func createAssetIssue2(request: Protocol_AssetIssueContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use UpdateWitness2 instead of this function.
  func updateWitness(request: Protocol_WitnessUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of UpdateWitness.
  func updateWitness2(request: Protocol_WitnessUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use CreateAccount2 instead of this function.
  func createAccount(request: Protocol_AccountCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of CreateAccount.
  func createAccount2(request: Protocol_AccountCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use CreateWitness2 instead of this function.
  func createWitness(request: Protocol_WitnessCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of CreateWitness.
  func createWitness2(request: Protocol_WitnessCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use TransferAsset2 instead of this function.
  func transferAsset(request: Protocol_TransferAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of TransferAsset.
  func transferAsset2(request: Protocol_TransferAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use ParticipateAssetIssue2 instead of this function.
  func participateAssetIssue(request: Protocol_ParticipateAssetIssueContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of ParticipateAssetIssue.
  func participateAssetIssue2(request: Protocol_ParticipateAssetIssueContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use FreezeBalance2 instead of this function.
  func freezeBalance(request: Protocol_FreezeBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of FreezeBalance.
  func freezeBalance2(request: Protocol_FreezeBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use UnfreezeBalance2 instead of this function.
  func unfreezeBalance(request: Protocol_UnfreezeBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of UnfreezeBalance.
  func unfreezeBalance2(request: Protocol_UnfreezeBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use UnfreezeAsset2 instead of this function.
  func unfreezeAsset(request: Protocol_UnfreezeAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of UnfreezeAsset.
  func unfreezeAsset2(request: Protocol_UnfreezeAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use WithdrawBalance2 instead of this function.
  func withdrawBalance(request: Protocol_WithdrawBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of WithdrawBalance.
  func withdrawBalance2(request: Protocol_WithdrawBalanceContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Please use UpdateAsset2 instead of this function.
  func updateAsset(request: Protocol_UpdateAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Use this function instead of UpdateAsset.
  func updateAsset2(request: Protocol_UpdateAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func proposalCreate(request: Protocol_ProposalCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func proposalApprove(request: Protocol_ProposalApproveContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func proposalDelete(request: Protocol_ProposalDeleteContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func buyStorage(request: Protocol_BuyStorageContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func buyStorageBytes(request: Protocol_BuyStorageBytesContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func sellStorage(request: Protocol_SellStorageContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func exchangeCreate(request: Protocol_ExchangeCreateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func exchangeInject(request: Protocol_ExchangeInjectContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func exchangeWithdraw(request: Protocol_ExchangeWithdrawContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func exchangeTransaction(request: Protocol_ExchangeTransactionContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func marketSellAsset(request: Protocol_MarketSellAssetContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func marketCancelOrder(request: Protocol_MarketCancelOrderContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getMarketOrderById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrder>

  func getMarketOrderByAccount(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderList>

  func getMarketPriceByPair(request: Protocol_MarketOrderPair, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketPriceList>

  func getMarketOrderListByPair(request: Protocol_MarketOrderPair, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderList>

  func getMarketPairList(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderPairList>

  func listNodes(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NodeList>

  func getAssetIssueByAccount(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getAccountNet(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AccountNetMessage>

  func getAccountResource(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AccountResourceMessage>

  func getAssetIssueByName(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueContract>

  func getAssetIssueListByName(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getAssetIssueById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueContract>

  ///Please use GetNowBlock2 instead of this function.
  func getNowBlock(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  ///Use this function instead of GetNowBlock.
  func getNowBlock2(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockExtention>

  ///Please use GetBlockByNum2 instead of this function.
  func getBlockByNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  ///Use this function instead of GetBlockByNum.
  func getBlockByNum2(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockExtention>

  func getTransactionCountByBlockNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getBlockById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  ///Please use GetBlockByLimitNext2 instead of this function.
  func getBlockByLimitNext(request: Protocol_BlockLimit, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockList>

  ///Use this function instead of GetBlockByLimitNext.
  func getBlockByLimitNext2(request: Protocol_BlockLimit, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockListExtention>

  ///Please use GetBlockByLatestNum2 instead of this function.
  func getBlockByLatestNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockList>

  ///Use this function instead of GetBlockByLatestNum.
  func getBlockByLatestNum2(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockListExtention>

  func getTransactionById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  func deployContract(request: Protocol_CreateSmartContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getContract(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_SmartContract>

  func getContractInfo(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_SmartContractDataWrapper>

  func triggerContract(request: Protocol_TriggerSmartContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func triggerConstantContract(request: Protocol_TriggerSmartContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func clearContractABI(request: Protocol_ClearABIContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func listWitnesses(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_WitnessList>

  func getDelegatedResource(request: Protocol_DelegatedResourceMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DelegatedResourceList>

  func getDelegatedResourceAccountIndex(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DelegatedResourceAccountIndex>

  func listProposals(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ProposalList>

  func getPaginatedProposalList(request: Protocol_PaginatedMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ProposalList>

  func getProposalById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Proposal>

  func listExchanges(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ExchangeList>

  func getPaginatedExchangeList(request: Protocol_PaginatedMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ExchangeList>

  func getExchangeById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Exchange>

  func getChainParameters(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ChainParameters>

  func getAssetIssueList(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getPaginatedAssetIssueList(request: Protocol_PaginatedMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func totalTransaction(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getNextMaintenanceTime(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  ///Warning: do not invoke this interface provided by others.
  ///Please use GetTransactionSign2 instead of this function.
  func getTransactionSign(request: Protocol_TransactionSign, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  ///Warning: do not invoke this interface provided by others.
  ///Use this function instead of GetTransactionSign.
  func getTransactionSign2(request: Protocol_TransactionSign, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  ///Warning: do not invoke this interface provided by others.
  func createAddress(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  ///Warning: do not invoke this interface provided by others.
  func easyTransferAsset(request: Protocol_EasyTransferAssetMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_EasyTransferResponse>

  ///Warning: do not invoke this interface provided by others.
  func easyTransferAssetByPrivate(request: Protocol_EasyTransferAssetByPrivateMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_EasyTransferResponse>

  ///Warning: do not invoke this interface provided by others.
  func easyTransfer(request: Protocol_EasyTransferMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_EasyTransferResponse>

  ///Warning: do not invoke this interface provided by others.
  func easyTransferByPrivate(request: Protocol_EasyTransferByPrivateMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_EasyTransferResponse>

  ///Warning: do not invoke this interface provided by others.
  func generateAddress(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AddressPrKeyPairMessage>

  func getTransactionInfoById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionInfo>

  func accountPermissionUpdate(request: Protocol_AccountPermissionUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func addSign(request: Protocol_TransactionSign, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getTransactionSignWeight(request: Protocol_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionSignWeight>

  func getTransactionApprovedList(request: Protocol_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionApprovedList>

  func getNodeInfo(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NodeInfo>

  func getRewardInfo(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getBrokerageInfo(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func updateBrokerage(request: Protocol_UpdateBrokerageContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  /// for shiededTransaction
  func createShieldedTransaction(request: Protocol_PrivateParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getMerkleTreeVoucherInfo(request: Protocol_OutputPointInfo, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_IncrementalMerkleVoucherInfo>

  func scanNoteByIvk(request: Protocol_IvkDecryptParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotes>

  func scanAndMarkNoteByIvk(request: Protocol_IvkDecryptAndMarkParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesMarked>

  func scanNoteByOvk(request: Protocol_OvkDecryptParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotes>

  func getSpendingKey(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func getExpandedSpendingKey(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ExpandedSpendingKeyMessage>

  func getAkFromAsk(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func getNkFromNsk(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func getIncomingViewingKey(request: Protocol_ViewingKeyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_IncomingViewingKeyMessage>

  func getDiversifier(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DiversifierMessage>

  func getNewShieldedAddress(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ShieldedAddressInfo>

  func getZenPaymentAddress(request: Protocol_IncomingViewingKeyDiversifierMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_PaymentAddressMessage>

  func getRcm(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func isSpend(request: Protocol_NoteParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_SpendResult>

  func createShieldedTransactionWithoutSpendAuthSig(request: Protocol_PrivateParametersWithoutAsk, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getShieldTransactionHash(request: Protocol_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func createSpendAuthSig(request: Protocol_SpendAuthSigParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func createShieldNullifier(request: Protocol_NfParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  ///for shielded contract
  func createShieldedContractParameters(request: Protocol_PrivateShieldedTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ShieldedTRC20Parameters>

  func createShieldedContractParametersWithoutAsk(request: Protocol_PrivateShieldedTRC20ParametersWithoutAsk, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ShieldedTRC20Parameters>

  func scanShieldedTRC20NotesByIvk(request: Protocol_IvkDecryptTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesTRC20>

  func scanShieldedTRC20NotesByOvk(request: Protocol_OvkDecryptTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesTRC20>

  func isShieldedTRC20ContractNoteSpent(request: Protocol_NfTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NullifierResult>

  func getTriggerInputForShieldedTRC20Contract(request: Protocol_ShieldedTRC20TriggerContractParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BytesMessage>

  func createCommonTransaction(request: Protocol_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getTransactionInfoByBlockNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionInfoList>

  func getBurnTrx(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getTransactionFromPending(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  func getTransactionListFromPending(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionIdList>

  func getPendingSize(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>
}

extension Protocol_WalletProvider {
  internal var serviceName: Substring { return "protocol.Wallet" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_Account>(),
        interceptors: self.interceptors?.makeGetAccountInterceptors() ?? [],
        userFunction: self.getAccount(request:context:)
      )

    case "GetAccountById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_Account>(),
        interceptors: self.interceptors?.makeGetAccountByIdInterceptors() ?? [],
        userFunction: self.getAccountById(request:context:)
      )

    case "GetAccountBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Protocol_AccountBalanceResponse>(),
        interceptors: self.interceptors?.makeGetAccountBalanceInterceptors() ?? [],
        userFunction: self.getAccountBalance(request:context:)
      )

    case "GetBlockBalanceTrace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BlockBalanceTrace.BlockIdentifier>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockBalanceTrace>(),
        interceptors: self.interceptors?.makeGetBlockBalanceTraceInterceptors() ?? [],
        userFunction: self.getBlockBalanceTrace(request:context:)
      )

    case "CreateTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransferContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeCreateTransactionInterceptors() ?? [],
        userFunction: self.createTransaction(request:context:)
      )

    case "CreateTransaction2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransferContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateTransaction2Interceptors() ?? [],
        userFunction: self.createTransaction2(request:context:)
      )

    case "BroadcastTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Transaction>(),
        responseSerializer: ProtobufSerializer<Protocol_Return>(),
        interceptors: self.interceptors?.makeBroadcastTransactionInterceptors() ?? [],
        userFunction: self.broadcastTransaction(request:context:)
      )

    case "UpdateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountUpdateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? [],
        userFunction: self.updateAccount(request:context:)
      )

    case "SetAccountId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_SetAccountIdContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeSetAccountIdInterceptors() ?? [],
        userFunction: self.setAccountId(request:context:)
      )

    case "UpdateAccount2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountUpdateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateAccount2Interceptors() ?? [],
        userFunction: self.updateAccount2(request:context:)
      )

    case "VoteWitnessAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_VoteWitnessContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeVoteWitnessAccountInterceptors() ?? [],
        userFunction: self.voteWitnessAccount(request:context:)
      )

    case "UpdateSetting":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UpdateSettingContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateSettingInterceptors() ?? [],
        userFunction: self.updateSetting(request:context:)
      )

    case "UpdateEnergyLimit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UpdateEnergyLimitContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateEnergyLimitInterceptors() ?? [],
        userFunction: self.updateEnergyLimit(request:context:)
      )

    case "VoteWitnessAccount2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_VoteWitnessContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeVoteWitnessAccount2Interceptors() ?? [],
        userFunction: self.voteWitnessAccount2(request:context:)
      )

    case "CreateAssetIssue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AssetIssueContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeCreateAssetIssueInterceptors() ?? [],
        userFunction: self.createAssetIssue(request:context:)
      )

    case "CreateAssetIssue2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AssetIssueContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateAssetIssue2Interceptors() ?? [],
        userFunction: self.createAssetIssue2(request:context:)
      )

    case "UpdateWitness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WitnessUpdateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeUpdateWitnessInterceptors() ?? [],
        userFunction: self.updateWitness(request:context:)
      )

    case "UpdateWitness2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WitnessUpdateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateWitness2Interceptors() ?? [],
        userFunction: self.updateWitness2(request:context:)
      )

    case "CreateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        userFunction: self.createAccount(request:context:)
      )

    case "CreateAccount2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateAccount2Interceptors() ?? [],
        userFunction: self.createAccount2(request:context:)
      )

    case "CreateWitness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WitnessCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeCreateWitnessInterceptors() ?? [],
        userFunction: self.createWitness(request:context:)
      )

    case "CreateWitness2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WitnessCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateWitness2Interceptors() ?? [],
        userFunction: self.createWitness2(request:context:)
      )

    case "TransferAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransferAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeTransferAssetInterceptors() ?? [],
        userFunction: self.transferAsset(request:context:)
      )

    case "TransferAsset2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransferAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeTransferAsset2Interceptors() ?? [],
        userFunction: self.transferAsset2(request:context:)
      )

    case "ParticipateAssetIssue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ParticipateAssetIssueContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeParticipateAssetIssueInterceptors() ?? [],
        userFunction: self.participateAssetIssue(request:context:)
      )

    case "ParticipateAssetIssue2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ParticipateAssetIssueContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeParticipateAssetIssue2Interceptors() ?? [],
        userFunction: self.participateAssetIssue2(request:context:)
      )

    case "FreezeBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_FreezeBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeFreezeBalanceInterceptors() ?? [],
        userFunction: self.freezeBalance(request:context:)
      )

    case "FreezeBalance2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_FreezeBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeFreezeBalance2Interceptors() ?? [],
        userFunction: self.freezeBalance2(request:context:)
      )

    case "UnfreezeBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UnfreezeBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeUnfreezeBalanceInterceptors() ?? [],
        userFunction: self.unfreezeBalance(request:context:)
      )

    case "UnfreezeBalance2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UnfreezeBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUnfreezeBalance2Interceptors() ?? [],
        userFunction: self.unfreezeBalance2(request:context:)
      )

    case "UnfreezeAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UnfreezeAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeUnfreezeAssetInterceptors() ?? [],
        userFunction: self.unfreezeAsset(request:context:)
      )

    case "UnfreezeAsset2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UnfreezeAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUnfreezeAsset2Interceptors() ?? [],
        userFunction: self.unfreezeAsset2(request:context:)
      )

    case "WithdrawBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WithdrawBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeWithdrawBalanceInterceptors() ?? [],
        userFunction: self.withdrawBalance(request:context:)
      )

    case "WithdrawBalance2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_WithdrawBalanceContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeWithdrawBalance2Interceptors() ?? [],
        userFunction: self.withdrawBalance2(request:context:)
      )

    case "UpdateAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UpdateAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeUpdateAssetInterceptors() ?? [],
        userFunction: self.updateAsset(request:context:)
      )

    case "UpdateAsset2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UpdateAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateAsset2Interceptors() ?? [],
        userFunction: self.updateAsset2(request:context:)
      )

    case "ProposalCreate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ProposalCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeProposalCreateInterceptors() ?? [],
        userFunction: self.proposalCreate(request:context:)
      )

    case "ProposalApprove":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ProposalApproveContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeProposalApproveInterceptors() ?? [],
        userFunction: self.proposalApprove(request:context:)
      )

    case "ProposalDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ProposalDeleteContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeProposalDeleteInterceptors() ?? [],
        userFunction: self.proposalDelete(request:context:)
      )

    case "BuyStorage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BuyStorageContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeBuyStorageInterceptors() ?? [],
        userFunction: self.buyStorage(request:context:)
      )

    case "BuyStorageBytes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BuyStorageBytesContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeBuyStorageBytesInterceptors() ?? [],
        userFunction: self.buyStorageBytes(request:context:)
      )

    case "SellStorage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_SellStorageContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeSellStorageInterceptors() ?? [],
        userFunction: self.sellStorage(request:context:)
      )

    case "ExchangeCreate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ExchangeCreateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeExchangeCreateInterceptors() ?? [],
        userFunction: self.exchangeCreate(request:context:)
      )

    case "ExchangeInject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ExchangeInjectContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeExchangeInjectInterceptors() ?? [],
        userFunction: self.exchangeInject(request:context:)
      )

    case "ExchangeWithdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ExchangeWithdrawContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeExchangeWithdrawInterceptors() ?? [],
        userFunction: self.exchangeWithdraw(request:context:)
      )

    case "ExchangeTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ExchangeTransactionContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeExchangeTransactionInterceptors() ?? [],
        userFunction: self.exchangeTransaction(request:context:)
      )

    case "MarketSellAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketSellAssetContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeMarketSellAssetInterceptors() ?? [],
        userFunction: self.marketSellAsset(request:context:)
      )

    case "MarketCancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketCancelOrderContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeMarketCancelOrderInterceptors() ?? [],
        userFunction: self.marketCancelOrder(request:context:)
      )

    case "GetMarketOrderById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrder>(),
        interceptors: self.interceptors?.makeGetMarketOrderByIdInterceptors() ?? [],
        userFunction: self.getMarketOrderById(request:context:)
      )

    case "GetMarketOrderByAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderList>(),
        interceptors: self.interceptors?.makeGetMarketOrderByAccountInterceptors() ?? [],
        userFunction: self.getMarketOrderByAccount(request:context:)
      )

    case "GetMarketPriceByPair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketOrderPair>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketPriceList>(),
        interceptors: self.interceptors?.makeGetMarketPriceByPairInterceptors() ?? [],
        userFunction: self.getMarketPriceByPair(request:context:)
      )

    case "GetMarketOrderListByPair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketOrderPair>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderList>(),
        interceptors: self.interceptors?.makeGetMarketOrderListByPairInterceptors() ?? [],
        userFunction: self.getMarketOrderListByPair(request:context:)
      )

    case "GetMarketPairList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderPairList>(),
        interceptors: self.interceptors?.makeGetMarketPairListInterceptors() ?? [],
        userFunction: self.getMarketPairList(request:context:)
      )

    case "ListNodes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NodeList>(),
        interceptors: self.interceptors?.makeListNodesInterceptors() ?? [],
        userFunction: self.listNodes(request:context:)
      )

    case "GetAssetIssueByAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetAssetIssueByAccountInterceptors() ?? [],
        userFunction: self.getAssetIssueByAccount(request:context:)
      )

    case "GetAccountNet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_AccountNetMessage>(),
        interceptors: self.interceptors?.makeGetAccountNetInterceptors() ?? [],
        userFunction: self.getAccountNet(request:context:)
      )

    case "GetAccountResource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_AccountResourceMessage>(),
        interceptors: self.interceptors?.makeGetAccountResourceInterceptors() ?? [],
        userFunction: self.getAccountResource(request:context:)
      )

    case "GetAssetIssueByName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueContract>(),
        interceptors: self.interceptors?.makeGetAssetIssueByNameInterceptors() ?? [],
        userFunction: self.getAssetIssueByName(request:context:)
      )

    case "GetAssetIssueListByName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetAssetIssueListByNameInterceptors() ?? [],
        userFunction: self.getAssetIssueListByName(request:context:)
      )

    case "GetAssetIssueById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueContract>(),
        interceptors: self.interceptors?.makeGetAssetIssueByIdInterceptors() ?? [],
        userFunction: self.getAssetIssueById(request:context:)
      )

    case "GetNowBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? [],
        userFunction: self.getNowBlock(request:context:)
      )

    case "GetNowBlock2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockExtention>(),
        interceptors: self.interceptors?.makeGetNowBlock2Interceptors() ?? [],
        userFunction: self.getNowBlock2(request:context:)
      )

    case "GetBlockByNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? [],
        userFunction: self.getBlockByNum(request:context:)
      )

    case "GetBlockByNum2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockExtention>(),
        interceptors: self.interceptors?.makeGetBlockByNum2Interceptors() ?? [],
        userFunction: self.getBlockByNum2(request:context:)
      )

    case "GetTransactionCountByBlockNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetTransactionCountByBlockNumInterceptors() ?? [],
        userFunction: self.getTransactionCountByBlockNum(request:context:)
      )

    case "GetBlockById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetBlockByIdInterceptors() ?? [],
        userFunction: self.getBlockById(request:context:)
      )

    case "GetBlockByLimitNext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BlockLimit>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockList>(),
        interceptors: self.interceptors?.makeGetBlockByLimitNextInterceptors() ?? [],
        userFunction: self.getBlockByLimitNext(request:context:)
      )

    case "GetBlockByLimitNext2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BlockLimit>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockListExtention>(),
        interceptors: self.interceptors?.makeGetBlockByLimitNext2Interceptors() ?? [],
        userFunction: self.getBlockByLimitNext2(request:context:)
      )

    case "GetBlockByLatestNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockList>(),
        interceptors: self.interceptors?.makeGetBlockByLatestNumInterceptors() ?? [],
        userFunction: self.getBlockByLatestNum(request:context:)
      )

    case "GetBlockByLatestNum2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockListExtention>(),
        interceptors: self.interceptors?.makeGetBlockByLatestNum2Interceptors() ?? [],
        userFunction: self.getBlockByLatestNum2(request:context:)
      )

    case "GetTransactionById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeGetTransactionByIdInterceptors() ?? [],
        userFunction: self.getTransactionById(request:context:)
      )

    case "DeployContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_CreateSmartContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeDeployContractInterceptors() ?? [],
        userFunction: self.deployContract(request:context:)
      )

    case "GetContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_SmartContract>(),
        interceptors: self.interceptors?.makeGetContractInterceptors() ?? [],
        userFunction: self.getContract(request:context:)
      )

    case "GetContractInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_SmartContractDataWrapper>(),
        interceptors: self.interceptors?.makeGetContractInfoInterceptors() ?? [],
        userFunction: self.getContractInfo(request:context:)
      )

    case "TriggerContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TriggerSmartContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeTriggerContractInterceptors() ?? [],
        userFunction: self.triggerContract(request:context:)
      )

    case "TriggerConstantContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TriggerSmartContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeTriggerConstantContractInterceptors() ?? [],
        userFunction: self.triggerConstantContract(request:context:)
      )

    case "ClearContractABI":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ClearABIContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeClearContractABIInterceptors() ?? [],
        userFunction: self.clearContractABI(request:context:)
      )

    case "ListWitnesses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_WitnessList>(),
        interceptors: self.interceptors?.makeListWitnessesInterceptors() ?? [],
        userFunction: self.listWitnesses(request:context:)
      )

    case "GetDelegatedResource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_DelegatedResourceMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DelegatedResourceList>(),
        interceptors: self.interceptors?.makeGetDelegatedResourceInterceptors() ?? [],
        userFunction: self.getDelegatedResource(request:context:)
      )

    case "GetDelegatedResourceAccountIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DelegatedResourceAccountIndex>(),
        interceptors: self.interceptors?.makeGetDelegatedResourceAccountIndexInterceptors() ?? [],
        userFunction: self.getDelegatedResourceAccountIndex(request:context:)
      )

    case "ListProposals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ProposalList>(),
        interceptors: self.interceptors?.makeListProposalsInterceptors() ?? [],
        userFunction: self.listProposals(request:context:)
      )

    case "GetPaginatedProposalList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PaginatedMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ProposalList>(),
        interceptors: self.interceptors?.makeGetPaginatedProposalListInterceptors() ?? [],
        userFunction: self.getPaginatedProposalList(request:context:)
      )

    case "GetProposalById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Proposal>(),
        interceptors: self.interceptors?.makeGetProposalByIdInterceptors() ?? [],
        userFunction: self.getProposalById(request:context:)
      )

    case "ListExchanges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ExchangeList>(),
        interceptors: self.interceptors?.makeListExchangesInterceptors() ?? [],
        userFunction: self.listExchanges(request:context:)
      )

    case "GetPaginatedExchangeList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PaginatedMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ExchangeList>(),
        interceptors: self.interceptors?.makeGetPaginatedExchangeListInterceptors() ?? [],
        userFunction: self.getPaginatedExchangeList(request:context:)
      )

    case "GetExchangeById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Exchange>(),
        interceptors: self.interceptors?.makeGetExchangeByIdInterceptors() ?? [],
        userFunction: self.getExchangeById(request:context:)
      )

    case "GetChainParameters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ChainParameters>(),
        interceptors: self.interceptors?.makeGetChainParametersInterceptors() ?? [],
        userFunction: self.getChainParameters(request:context:)
      )

    case "GetAssetIssueList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetAssetIssueListInterceptors() ?? [],
        userFunction: self.getAssetIssueList(request:context:)
      )

    case "GetPaginatedAssetIssueList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PaginatedMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetPaginatedAssetIssueListInterceptors() ?? [],
        userFunction: self.getPaginatedAssetIssueList(request:context:)
      )

    case "TotalTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeTotalTransactionInterceptors() ?? [],
        userFunction: self.totalTransaction(request:context:)
      )

    case "GetNextMaintenanceTime":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetNextMaintenanceTimeInterceptors() ?? [],
        userFunction: self.getNextMaintenanceTime(request:context:)
      )

    case "GetTransactionSign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransactionSign>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeGetTransactionSignInterceptors() ?? [],
        userFunction: self.getTransactionSign(request:context:)
      )

    case "GetTransactionSign2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransactionSign>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeGetTransactionSign2Interceptors() ?? [],
        userFunction: self.getTransactionSign2(request:context:)
      )

    case "CreateAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeCreateAddressInterceptors() ?? [],
        userFunction: self.createAddress(request:context:)
      )

    case "EasyTransferAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EasyTransferAssetMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_EasyTransferResponse>(),
        interceptors: self.interceptors?.makeEasyTransferAssetInterceptors() ?? [],
        userFunction: self.easyTransferAsset(request:context:)
      )

    case "EasyTransferAssetByPrivate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EasyTransferAssetByPrivateMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_EasyTransferResponse>(),
        interceptors: self.interceptors?.makeEasyTransferAssetByPrivateInterceptors() ?? [],
        userFunction: self.easyTransferAssetByPrivate(request:context:)
      )

    case "EasyTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EasyTransferMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_EasyTransferResponse>(),
        interceptors: self.interceptors?.makeEasyTransferInterceptors() ?? [],
        userFunction: self.easyTransfer(request:context:)
      )

    case "EasyTransferByPrivate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EasyTransferByPrivateMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_EasyTransferResponse>(),
        interceptors: self.interceptors?.makeEasyTransferByPrivateInterceptors() ?? [],
        userFunction: self.easyTransferByPrivate(request:context:)
      )

    case "GenerateAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AddressPrKeyPairMessage>(),
        interceptors: self.interceptors?.makeGenerateAddressInterceptors() ?? [],
        userFunction: self.generateAddress(request:context:)
      )

    case "GetTransactionInfoById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionInfo>(),
        interceptors: self.interceptors?.makeGetTransactionInfoByIdInterceptors() ?? [],
        userFunction: self.getTransactionInfoById(request:context:)
      )

    case "AccountPermissionUpdate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountPermissionUpdateContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeAccountPermissionUpdateInterceptors() ?? [],
        userFunction: self.accountPermissionUpdate(request:context:)
      )

    case "AddSign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TransactionSign>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeAddSignInterceptors() ?? [],
        userFunction: self.addSign(request:context:)
      )

    case "GetTransactionSignWeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Transaction>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionSignWeight>(),
        interceptors: self.interceptors?.makeGetTransactionSignWeightInterceptors() ?? [],
        userFunction: self.getTransactionSignWeight(request:context:)
      )

    case "GetTransactionApprovedList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Transaction>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionApprovedList>(),
        interceptors: self.interceptors?.makeGetTransactionApprovedListInterceptors() ?? [],
        userFunction: self.getTransactionApprovedList(request:context:)
      )

    case "GetNodeInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NodeInfo>(),
        interceptors: self.interceptors?.makeGetNodeInfoInterceptors() ?? [],
        userFunction: self.getNodeInfo(request:context:)
      )

    case "GetRewardInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetRewardInfoInterceptors() ?? [],
        userFunction: self.getRewardInfo(request:context:)
      )

    case "GetBrokerageInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetBrokerageInfoInterceptors() ?? [],
        userFunction: self.getBrokerageInfo(request:context:)
      )

    case "UpdateBrokerage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_UpdateBrokerageContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeUpdateBrokerageInterceptors() ?? [],
        userFunction: self.updateBrokerage(request:context:)
      )

    case "CreateShieldedTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PrivateParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateShieldedTransactionInterceptors() ?? [],
        userFunction: self.createShieldedTransaction(request:context:)
      )

    case "GetMerkleTreeVoucherInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OutputPointInfo>(),
        responseSerializer: ProtobufSerializer<Protocol_IncrementalMerkleVoucherInfo>(),
        interceptors: self.interceptors?.makeGetMerkleTreeVoucherInfoInterceptors() ?? [],
        userFunction: self.getMerkleTreeVoucherInfo(request:context:)
      )

    case "ScanNoteByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotes>(),
        interceptors: self.interceptors?.makeScanNoteByIvkInterceptors() ?? [],
        userFunction: self.scanNoteByIvk(request:context:)
      )

    case "ScanAndMarkNoteByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptAndMarkParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesMarked>(),
        interceptors: self.interceptors?.makeScanAndMarkNoteByIvkInterceptors() ?? [],
        userFunction: self.scanAndMarkNoteByIvk(request:context:)
      )

    case "ScanNoteByOvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OvkDecryptParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotes>(),
        interceptors: self.interceptors?.makeScanNoteByOvkInterceptors() ?? [],
        userFunction: self.scanNoteByOvk(request:context:)
      )

    case "GetSpendingKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetSpendingKeyInterceptors() ?? [],
        userFunction: self.getSpendingKey(request:context:)
      )

    case "GetExpandedSpendingKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ExpandedSpendingKeyMessage>(),
        interceptors: self.interceptors?.makeGetExpandedSpendingKeyInterceptors() ?? [],
        userFunction: self.getExpandedSpendingKey(request:context:)
      )

    case "GetAkFromAsk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetAkFromAskInterceptors() ?? [],
        userFunction: self.getAkFromAsk(request:context:)
      )

    case "GetNkFromNsk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetNkFromNskInterceptors() ?? [],
        userFunction: self.getNkFromNsk(request:context:)
      )

    case "GetIncomingViewingKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ViewingKeyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_IncomingViewingKeyMessage>(),
        interceptors: self.interceptors?.makeGetIncomingViewingKeyInterceptors() ?? [],
        userFunction: self.getIncomingViewingKey(request:context:)
      )

    case "GetDiversifier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DiversifierMessage>(),
        interceptors: self.interceptors?.makeGetDiversifierInterceptors() ?? [],
        userFunction: self.getDiversifier(request:context:)
      )

    case "GetNewShieldedAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ShieldedAddressInfo>(),
        interceptors: self.interceptors?.makeGetNewShieldedAddressInterceptors() ?? [],
        userFunction: self.getNewShieldedAddress(request:context:)
      )

    case "GetZenPaymentAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IncomingViewingKeyDiversifierMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_PaymentAddressMessage>(),
        interceptors: self.interceptors?.makeGetZenPaymentAddressInterceptors() ?? [],
        userFunction: self.getZenPaymentAddress(request:context:)
      )

    case "GetRcm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetRcmInterceptors() ?? [],
        userFunction: self.getRcm(request:context:)
      )

    case "IsSpend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NoteParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_SpendResult>(),
        interceptors: self.interceptors?.makeIsSpendInterceptors() ?? [],
        userFunction: self.isSpend(request:context:)
      )

    case "CreateShieldedTransactionWithoutSpendAuthSig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PrivateParametersWithoutAsk>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateShieldedTransactionWithoutSpendAuthSigInterceptors() ?? [],
        userFunction: self.createShieldedTransactionWithoutSpendAuthSig(request:context:)
      )

    case "GetShieldTransactionHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Transaction>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetShieldTransactionHashInterceptors() ?? [],
        userFunction: self.getShieldTransactionHash(request:context:)
      )

    case "CreateSpendAuthSig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_SpendAuthSigParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeCreateSpendAuthSigInterceptors() ?? [],
        userFunction: self.createSpendAuthSig(request:context:)
      )

    case "CreateShieldNullifier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NfParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeCreateShieldNullifierInterceptors() ?? [],
        userFunction: self.createShieldNullifier(request:context:)
      )

    case "CreateShieldedContractParameters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PrivateShieldedTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_ShieldedTRC20Parameters>(),
        interceptors: self.interceptors?.makeCreateShieldedContractParametersInterceptors() ?? [],
        userFunction: self.createShieldedContractParameters(request:context:)
      )

    case "CreateShieldedContractParametersWithoutAsk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PrivateShieldedTRC20ParametersWithoutAsk>(),
        responseSerializer: ProtobufSerializer<Protocol_ShieldedTRC20Parameters>(),
        interceptors: self.interceptors?.makeCreateShieldedContractParametersWithoutAskInterceptors() ?? [],
        userFunction: self.createShieldedContractParametersWithoutAsk(request:context:)
      )

    case "ScanShieldedTRC20NotesByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesTRC20>(),
        interceptors: self.interceptors?.makeScanShieldedTRC20NotesByIvkInterceptors() ?? [],
        userFunction: self.scanShieldedTRC20NotesByIvk(request:context:)
      )

    case "ScanShieldedTRC20NotesByOvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OvkDecryptTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesTRC20>(),
        interceptors: self.interceptors?.makeScanShieldedTRC20NotesByOvkInterceptors() ?? [],
        userFunction: self.scanShieldedTRC20NotesByOvk(request:context:)
      )

    case "IsShieldedTRC20ContractNoteSpent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NfTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_NullifierResult>(),
        interceptors: self.interceptors?.makeIsShieldedTRC20ContractNoteSpentInterceptors() ?? [],
        userFunction: self.isShieldedTRC20ContractNoteSpent(request:context:)
      )

    case "GetTriggerInputForShieldedTRC20Contract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_ShieldedTRC20TriggerContractParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_BytesMessage>(),
        interceptors: self.interceptors?.makeGetTriggerInputForShieldedTRC20ContractInterceptors() ?? [],
        userFunction: self.getTriggerInputForShieldedTRC20Contract(request:context:)
      )

    case "CreateCommonTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Transaction>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeCreateCommonTransactionInterceptors() ?? [],
        userFunction: self.createCommonTransaction(request:context:)
      )

    case "GetTransactionInfoByBlockNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionInfoList>(),
        interceptors: self.interceptors?.makeGetTransactionInfoByBlockNumInterceptors() ?? [],
        userFunction: self.getTransactionInfoByBlockNum(request:context:)
      )

    case "GetBurnTrx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetBurnTrxInterceptors() ?? [],
        userFunction: self.getBurnTrx(request:context:)
      )

    case "GetTransactionFromPending":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeGetTransactionFromPendingInterceptors() ?? [],
        userFunction: self.getTransactionFromPending(request:context:)
      )

    case "GetTransactionListFromPending":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionIdList>(),
        interceptors: self.interceptors?.makeGetTransactionListFromPendingInterceptors() ?? [],
        userFunction: self.getTransactionListFromPending(request:context:)
      )

    case "GetPendingSize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetPendingSizeInterceptors() ?? [],
        userFunction: self.getPendingSize(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Protocol_WalletServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when handling 'getAccountById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountByIdInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when handling 'getAccountBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountBalanceInterceptors() -> [ServerInterceptor<Protocol_AccountBalanceRequest, Protocol_AccountBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockBalanceTrace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockBalanceTraceInterceptors() -> [ServerInterceptor<Protocol_BlockBalanceTrace.BlockIdentifier, Protocol_BlockBalanceTrace>]

  /// - Returns: Interceptors to use when handling 'createTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTransactionInterceptors() -> [ServerInterceptor<Protocol_TransferContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'createTransaction2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTransaction2Interceptors() -> [ServerInterceptor<Protocol_TransferContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'broadcastTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBroadcastTransactionInterceptors() -> [ServerInterceptor<Protocol_Transaction, Protocol_Return>]

  /// - Returns: Interceptors to use when handling 'updateAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAccountInterceptors() -> [ServerInterceptor<Protocol_AccountUpdateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'setAccountId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAccountIdInterceptors() -> [ServerInterceptor<Protocol_SetAccountIdContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'updateAccount2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAccount2Interceptors() -> [ServerInterceptor<Protocol_AccountUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'voteWitnessAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteWitnessAccountInterceptors() -> [ServerInterceptor<Protocol_VoteWitnessContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'updateSetting'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateSettingInterceptors() -> [ServerInterceptor<Protocol_UpdateSettingContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'updateEnergyLimit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateEnergyLimitInterceptors() -> [ServerInterceptor<Protocol_UpdateEnergyLimitContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'voteWitnessAccount2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteWitnessAccount2Interceptors() -> [ServerInterceptor<Protocol_VoteWitnessContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'createAssetIssue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAssetIssueInterceptors() -> [ServerInterceptor<Protocol_AssetIssueContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'createAssetIssue2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAssetIssue2Interceptors() -> [ServerInterceptor<Protocol_AssetIssueContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'updateWitness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateWitnessInterceptors() -> [ServerInterceptor<Protocol_WitnessUpdateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'updateWitness2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateWitness2Interceptors() -> [ServerInterceptor<Protocol_WitnessUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'createAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAccountInterceptors() -> [ServerInterceptor<Protocol_AccountCreateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'createAccount2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAccount2Interceptors() -> [ServerInterceptor<Protocol_AccountCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'createWitness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateWitnessInterceptors() -> [ServerInterceptor<Protocol_WitnessCreateContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'createWitness2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateWitness2Interceptors() -> [ServerInterceptor<Protocol_WitnessCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'transferAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferAssetInterceptors() -> [ServerInterceptor<Protocol_TransferAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'transferAsset2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferAsset2Interceptors() -> [ServerInterceptor<Protocol_TransferAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'participateAssetIssue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParticipateAssetIssueInterceptors() -> [ServerInterceptor<Protocol_ParticipateAssetIssueContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'participateAssetIssue2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParticipateAssetIssue2Interceptors() -> [ServerInterceptor<Protocol_ParticipateAssetIssueContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'freezeBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFreezeBalanceInterceptors() -> [ServerInterceptor<Protocol_FreezeBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'freezeBalance2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFreezeBalance2Interceptors() -> [ServerInterceptor<Protocol_FreezeBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'unfreezeBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfreezeBalanceInterceptors() -> [ServerInterceptor<Protocol_UnfreezeBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'unfreezeBalance2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfreezeBalance2Interceptors() -> [ServerInterceptor<Protocol_UnfreezeBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'unfreezeAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfreezeAssetInterceptors() -> [ServerInterceptor<Protocol_UnfreezeAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'unfreezeAsset2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfreezeAsset2Interceptors() -> [ServerInterceptor<Protocol_UnfreezeAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'withdrawBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawBalanceInterceptors() -> [ServerInterceptor<Protocol_WithdrawBalanceContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'withdrawBalance2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawBalance2Interceptors() -> [ServerInterceptor<Protocol_WithdrawBalanceContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'updateAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAssetInterceptors() -> [ServerInterceptor<Protocol_UpdateAssetContract, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'updateAsset2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAsset2Interceptors() -> [ServerInterceptor<Protocol_UpdateAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'proposalCreate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalCreateInterceptors() -> [ServerInterceptor<Protocol_ProposalCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'proposalApprove'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalApproveInterceptors() -> [ServerInterceptor<Protocol_ProposalApproveContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'proposalDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalDeleteInterceptors() -> [ServerInterceptor<Protocol_ProposalDeleteContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'buyStorage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyStorageInterceptors() -> [ServerInterceptor<Protocol_BuyStorageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'buyStorageBytes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyStorageBytesInterceptors() -> [ServerInterceptor<Protocol_BuyStorageBytesContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'sellStorage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellStorageInterceptors() -> [ServerInterceptor<Protocol_SellStorageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'exchangeCreate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeCreateInterceptors() -> [ServerInterceptor<Protocol_ExchangeCreateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'exchangeInject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeInjectInterceptors() -> [ServerInterceptor<Protocol_ExchangeInjectContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'exchangeWithdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeWithdrawInterceptors() -> [ServerInterceptor<Protocol_ExchangeWithdrawContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'exchangeTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeTransactionInterceptors() -> [ServerInterceptor<Protocol_ExchangeTransactionContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'marketSellAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketSellAssetInterceptors() -> [ServerInterceptor<Protocol_MarketSellAssetContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'marketCancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketCancelOrderInterceptors() -> [ServerInterceptor<Protocol_MarketCancelOrderContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_MarketOrder>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderByAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderByAccountInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when handling 'getMarketPriceByPair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketPriceByPairInterceptors() -> [ServerInterceptor<Protocol_MarketOrderPair, Protocol_MarketPriceList>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderListByPair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderListByPairInterceptors() -> [ServerInterceptor<Protocol_MarketOrderPair, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when handling 'getMarketPairList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketPairListInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_MarketOrderPairList>]

  /// - Returns: Interceptors to use when handling 'listNodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListNodesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NodeList>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueByAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueByAccountInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getAccountNet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountNetInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_AccountNetMessage>]

  /// - Returns: Interceptors to use when handling 'getAccountResource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountResourceInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_AccountResourceMessage>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueByName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueByNameInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueListByName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueListByNameInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when handling 'getNowBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNowBlockInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getNowBlock2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNowBlock2Interceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when handling 'getBlockByNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getBlockByNum2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByNum2Interceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionCountByBlockNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionCountByBlockNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getBlockById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getBlockByLimitNext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByLimitNextInterceptors() -> [ServerInterceptor<Protocol_BlockLimit, Protocol_BlockList>]

  /// - Returns: Interceptors to use when handling 'getBlockByLimitNext2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByLimitNext2Interceptors() -> [ServerInterceptor<Protocol_BlockLimit, Protocol_BlockListExtention>]

  /// - Returns: Interceptors to use when handling 'getBlockByLatestNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByLatestNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_BlockList>]

  /// - Returns: Interceptors to use when handling 'getBlockByLatestNum2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByLatestNum2Interceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_BlockListExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'deployContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeployContractInterceptors() -> [ServerInterceptor<Protocol_CreateSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetContractInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_SmartContract>]

  /// - Returns: Interceptors to use when handling 'getContractInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetContractInfoInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_SmartContractDataWrapper>]

  /// - Returns: Interceptors to use when handling 'triggerContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTriggerContractInterceptors() -> [ServerInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'triggerConstantContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTriggerConstantContractInterceptors() -> [ServerInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'clearContractABI'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearContractABIInterceptors() -> [ServerInterceptor<Protocol_ClearABIContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'listWitnesses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListWitnessesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_WitnessList>]

  /// - Returns: Interceptors to use when handling 'getDelegatedResource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegatedResourceInterceptors() -> [ServerInterceptor<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>]

  /// - Returns: Interceptors to use when handling 'getDelegatedResourceAccountIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegatedResourceAccountIndexInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>]

  /// - Returns: Interceptors to use when handling 'listProposals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListProposalsInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_ProposalList>]

  /// - Returns: Interceptors to use when handling 'getPaginatedProposalList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaginatedProposalListInterceptors() -> [ServerInterceptor<Protocol_PaginatedMessage, Protocol_ProposalList>]

  /// - Returns: Interceptors to use when handling 'getProposalById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProposalByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Proposal>]

  /// - Returns: Interceptors to use when handling 'listExchanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListExchangesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when handling 'getPaginatedExchangeList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaginatedExchangeListInterceptors() -> [ServerInterceptor<Protocol_PaginatedMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when handling 'getExchangeById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetExchangeByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Exchange>]

  /// - Returns: Interceptors to use when handling 'getChainParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChainParametersInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_ChainParameters>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueListInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getPaginatedAssetIssueList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaginatedAssetIssueListInterceptors() -> [ServerInterceptor<Protocol_PaginatedMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'totalTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalTransactionInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getNextMaintenanceTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNextMaintenanceTimeInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getTransactionSign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionSignInterceptors() -> [ServerInterceptor<Protocol_TransactionSign, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'getTransactionSign2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionSign2Interceptors() -> [ServerInterceptor<Protocol_TransactionSign, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'createAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAddressInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'easyTransferAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEasyTransferAssetInterceptors() -> [ServerInterceptor<Protocol_EasyTransferAssetMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when handling 'easyTransferAssetByPrivate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEasyTransferAssetByPrivateInterceptors() -> [ServerInterceptor<Protocol_EasyTransferAssetByPrivateMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when handling 'easyTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEasyTransferInterceptors() -> [ServerInterceptor<Protocol_EasyTransferMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when handling 'easyTransferByPrivate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEasyTransferByPrivateInterceptors() -> [ServerInterceptor<Protocol_EasyTransferByPrivateMessage, Protocol_EasyTransferResponse>]

  /// - Returns: Interceptors to use when handling 'generateAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateAddressInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>]

  /// - Returns: Interceptors to use when handling 'getTransactionInfoById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionInfoByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_TransactionInfo>]

  /// - Returns: Interceptors to use when handling 'accountPermissionUpdate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPermissionUpdateInterceptors() -> [ServerInterceptor<Protocol_AccountPermissionUpdateContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'addSign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddSignInterceptors() -> [ServerInterceptor<Protocol_TransactionSign, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionSignWeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionSignWeightInterceptors() -> [ServerInterceptor<Protocol_Transaction, Protocol_TransactionSignWeight>]

  /// - Returns: Interceptors to use when handling 'getTransactionApprovedList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionApprovedListInterceptors() -> [ServerInterceptor<Protocol_Transaction, Protocol_TransactionApprovedList>]

  /// - Returns: Interceptors to use when handling 'getNodeInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNodeInfoInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NodeInfo>]

  /// - Returns: Interceptors to use when handling 'getRewardInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRewardInfoInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getBrokerageInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBrokerageInfoInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'updateBrokerage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBrokerageInterceptors() -> [ServerInterceptor<Protocol_UpdateBrokerageContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'createShieldedTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateShieldedTransactionInterceptors() -> [ServerInterceptor<Protocol_PrivateParameters, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getMerkleTreeVoucherInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMerkleTreeVoucherInfoInterceptors() -> [ServerInterceptor<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>]

  /// - Returns: Interceptors to use when handling 'scanNoteByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanNoteByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when handling 'scanAndMarkNoteByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanAndMarkNoteByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>]

  /// - Returns: Interceptors to use when handling 'scanNoteByOvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanNoteByOvkInterceptors() -> [ServerInterceptor<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when handling 'getSpendingKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSpendingKeyInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'getExpandedSpendingKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetExpandedSpendingKeyInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_ExpandedSpendingKeyMessage>]

  /// - Returns: Interceptors to use when handling 'getAkFromAsk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAkFromAskInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'getNkFromNsk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNkFromNskInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'getIncomingViewingKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetIncomingViewingKeyInterceptors() -> [ServerInterceptor<Protocol_ViewingKeyMessage, Protocol_IncomingViewingKeyMessage>]

  /// - Returns: Interceptors to use when handling 'getDiversifier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDiversifierInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_DiversifierMessage>]

  /// - Returns: Interceptors to use when handling 'getNewShieldedAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNewShieldedAddressInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_ShieldedAddressInfo>]

  /// - Returns: Interceptors to use when handling 'getZenPaymentAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetZenPaymentAddressInterceptors() -> [ServerInterceptor<Protocol_IncomingViewingKeyDiversifierMessage, Protocol_PaymentAddressMessage>]

  /// - Returns: Interceptors to use when handling 'getRcm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRcmInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'isSpend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsSpendInterceptors() -> [ServerInterceptor<Protocol_NoteParameters, Protocol_SpendResult>]

  /// - Returns: Interceptors to use when handling 'createShieldedTransactionWithoutSpendAuthSig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateShieldedTransactionWithoutSpendAuthSigInterceptors() -> [ServerInterceptor<Protocol_PrivateParametersWithoutAsk, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getShieldTransactionHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetShieldTransactionHashInterceptors() -> [ServerInterceptor<Protocol_Transaction, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'createSpendAuthSig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSpendAuthSigInterceptors() -> [ServerInterceptor<Protocol_SpendAuthSigParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'createShieldNullifier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateShieldNullifierInterceptors() -> [ServerInterceptor<Protocol_NfParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'createShieldedContractParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateShieldedContractParametersInterceptors() -> [ServerInterceptor<Protocol_PrivateShieldedTRC20Parameters, Protocol_ShieldedTRC20Parameters>]

  /// - Returns: Interceptors to use when handling 'createShieldedContractParametersWithoutAsk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateShieldedContractParametersWithoutAskInterceptors() -> [ServerInterceptor<Protocol_PrivateShieldedTRC20ParametersWithoutAsk, Protocol_ShieldedTRC20Parameters>]

  /// - Returns: Interceptors to use when handling 'scanShieldedTRC20NotesByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanShieldedTRC20NotesByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when handling 'scanShieldedTRC20NotesByOvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanShieldedTRC20NotesByOvkInterceptors() -> [ServerInterceptor<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when handling 'isShieldedTRC20ContractNoteSpent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsShieldedTRC20ContractNoteSpentInterceptors() -> [ServerInterceptor<Protocol_NfTRC20Parameters, Protocol_NullifierResult>]

  /// - Returns: Interceptors to use when handling 'getTriggerInputForShieldedTRC20Contract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTriggerInputForShieldedTRC20ContractInterceptors() -> [ServerInterceptor<Protocol_ShieldedTRC20TriggerContractParameters, Protocol_BytesMessage>]

  /// - Returns: Interceptors to use when handling 'createCommonTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCommonTransactionInterceptors() -> [ServerInterceptor<Protocol_Transaction, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionInfoByBlockNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionInfoByBlockNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_TransactionInfoList>]

  /// - Returns: Interceptors to use when handling 'getBurnTrx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBurnTrxInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getTransactionFromPending'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionFromPendingInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'getTransactionListFromPending'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionListFromPendingInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_TransactionIdList>]

  /// - Returns: Interceptors to use when handling 'getPendingSize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPendingSizeInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_WalletSolidityProvider: CallHandlerProvider {
  var interceptors: Protocol_WalletSolidityServerInterceptorFactoryProtocol? { get }

  func getAccount(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Account>

  func getAccountById(request: Protocol_Account, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Account>

  func listWitnesses(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_WitnessList>

  func getAssetIssueList(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getPaginatedAssetIssueList(request: Protocol_PaginatedMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getAssetIssueByName(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueContract>

  func getAssetIssueListByName(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueList>

  func getAssetIssueById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AssetIssueContract>

  ///Please use GetNowBlock2 instead of this function.
  func getNowBlock(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  ///Use this function instead of GetNowBlock.
  func getNowBlock2(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockExtention>

  ///Please use GetBlockByNum2 instead of this function.
  func getBlockByNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  ///Use this function instead of GetBlockByNum.
  func getBlockByNum2(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockExtention>

  func getTransactionCountByBlockNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getDelegatedResource(request: Protocol_DelegatedResourceMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DelegatedResourceList>

  func getDelegatedResourceAccountIndex(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DelegatedResourceAccountIndex>

  func getExchangeById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Exchange>

  func listExchanges(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_ExchangeList>

  func getTransactionById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Transaction>

  func getTransactionInfoById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionInfo>

  ///Warning: do not invoke this interface provided by others.
  func generateAddress(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_AddressPrKeyPairMessage>

  func getMerkleTreeVoucherInfo(request: Protocol_OutputPointInfo, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_IncrementalMerkleVoucherInfo>

  func scanNoteByIvk(request: Protocol_IvkDecryptParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotes>

  func scanAndMarkNoteByIvk(request: Protocol_IvkDecryptAndMarkParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesMarked>

  func scanNoteByOvk(request: Protocol_OvkDecryptParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotes>

  func isSpend(request: Protocol_NoteParameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_SpendResult>

  func scanShieldedTRC20NotesByIvk(request: Protocol_IvkDecryptTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesTRC20>

  func scanShieldedTRC20NotesByOvk(request: Protocol_OvkDecryptTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DecryptNotesTRC20>

  func isShieldedTRC20ContractNoteSpent(request: Protocol_NfTRC20Parameters, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NullifierResult>

  func getRewardInfo(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func getBrokerageInfo(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>

  func triggerConstantContract(request: Protocol_TriggerSmartContract, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionExtention>

  func getTransactionInfoByBlockNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionInfoList>

  func getMarketOrderById(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrder>

  func getMarketOrderByAccount(request: Protocol_BytesMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderList>

  func getMarketPriceByPair(request: Protocol_MarketOrderPair, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketPriceList>

  func getMarketOrderListByPair(request: Protocol_MarketOrderPair, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderList>

  func getMarketPairList(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MarketOrderPairList>

  func getBurnTrx(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_NumberMessage>
}

extension Protocol_WalletSolidityProvider {
  internal var serviceName: Substring { return "protocol.WalletSolidity" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_Account>(),
        interceptors: self.interceptors?.makeGetAccountInterceptors() ?? [],
        userFunction: self.getAccount(request:context:)
      )

    case "GetAccountById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_Account>(),
        responseSerializer: ProtobufSerializer<Protocol_Account>(),
        interceptors: self.interceptors?.makeGetAccountByIdInterceptors() ?? [],
        userFunction: self.getAccountById(request:context:)
      )

    case "ListWitnesses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_WitnessList>(),
        interceptors: self.interceptors?.makeListWitnessesInterceptors() ?? [],
        userFunction: self.listWitnesses(request:context:)
      )

    case "GetAssetIssueList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetAssetIssueListInterceptors() ?? [],
        userFunction: self.getAssetIssueList(request:context:)
      )

    case "GetPaginatedAssetIssueList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_PaginatedMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetPaginatedAssetIssueListInterceptors() ?? [],
        userFunction: self.getPaginatedAssetIssueList(request:context:)
      )

    case "GetAssetIssueByName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueContract>(),
        interceptors: self.interceptors?.makeGetAssetIssueByNameInterceptors() ?? [],
        userFunction: self.getAssetIssueByName(request:context:)
      )

    case "GetAssetIssueListByName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueList>(),
        interceptors: self.interceptors?.makeGetAssetIssueListByNameInterceptors() ?? [],
        userFunction: self.getAssetIssueListByName(request:context:)
      )

    case "GetAssetIssueById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AssetIssueContract>(),
        interceptors: self.interceptors?.makeGetAssetIssueByIdInterceptors() ?? [],
        userFunction: self.getAssetIssueById(request:context:)
      )

    case "GetNowBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? [],
        userFunction: self.getNowBlock(request:context:)
      )

    case "GetNowBlock2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockExtention>(),
        interceptors: self.interceptors?.makeGetNowBlock2Interceptors() ?? [],
        userFunction: self.getNowBlock2(request:context:)
      )

    case "GetBlockByNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? [],
        userFunction: self.getBlockByNum(request:context:)
      )

    case "GetBlockByNum2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockExtention>(),
        interceptors: self.interceptors?.makeGetBlockByNum2Interceptors() ?? [],
        userFunction: self.getBlockByNum2(request:context:)
      )

    case "GetTransactionCountByBlockNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetTransactionCountByBlockNumInterceptors() ?? [],
        userFunction: self.getTransactionCountByBlockNum(request:context:)
      )

    case "GetDelegatedResource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_DelegatedResourceMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DelegatedResourceList>(),
        interceptors: self.interceptors?.makeGetDelegatedResourceInterceptors() ?? [],
        userFunction: self.getDelegatedResource(request:context:)
      )

    case "GetDelegatedResourceAccountIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DelegatedResourceAccountIndex>(),
        interceptors: self.interceptors?.makeGetDelegatedResourceAccountIndexInterceptors() ?? [],
        userFunction: self.getDelegatedResourceAccountIndex(request:context:)
      )

    case "GetExchangeById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Exchange>(),
        interceptors: self.interceptors?.makeGetExchangeByIdInterceptors() ?? [],
        userFunction: self.getExchangeById(request:context:)
      )

    case "ListExchanges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_ExchangeList>(),
        interceptors: self.interceptors?.makeListExchangesInterceptors() ?? [],
        userFunction: self.listExchanges(request:context:)
      )

    case "GetTransactionById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Transaction>(),
        interceptors: self.interceptors?.makeGetTransactionByIdInterceptors() ?? [],
        userFunction: self.getTransactionById(request:context:)
      )

    case "GetTransactionInfoById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionInfo>(),
        interceptors: self.interceptors?.makeGetTransactionInfoByIdInterceptors() ?? [],
        userFunction: self.getTransactionInfoById(request:context:)
      )

    case "GenerateAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_AddressPrKeyPairMessage>(),
        interceptors: self.interceptors?.makeGenerateAddressInterceptors() ?? [],
        userFunction: self.generateAddress(request:context:)
      )

    case "GetMerkleTreeVoucherInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OutputPointInfo>(),
        responseSerializer: ProtobufSerializer<Protocol_IncrementalMerkleVoucherInfo>(),
        interceptors: self.interceptors?.makeGetMerkleTreeVoucherInfoInterceptors() ?? [],
        userFunction: self.getMerkleTreeVoucherInfo(request:context:)
      )

    case "ScanNoteByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotes>(),
        interceptors: self.interceptors?.makeScanNoteByIvkInterceptors() ?? [],
        userFunction: self.scanNoteByIvk(request:context:)
      )

    case "ScanAndMarkNoteByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptAndMarkParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesMarked>(),
        interceptors: self.interceptors?.makeScanAndMarkNoteByIvkInterceptors() ?? [],
        userFunction: self.scanAndMarkNoteByIvk(request:context:)
      )

    case "ScanNoteByOvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OvkDecryptParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotes>(),
        interceptors: self.interceptors?.makeScanNoteByOvkInterceptors() ?? [],
        userFunction: self.scanNoteByOvk(request:context:)
      )

    case "IsSpend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NoteParameters>(),
        responseSerializer: ProtobufSerializer<Protocol_SpendResult>(),
        interceptors: self.interceptors?.makeIsSpendInterceptors() ?? [],
        userFunction: self.isSpend(request:context:)
      )

    case "ScanShieldedTRC20NotesByIvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_IvkDecryptTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesTRC20>(),
        interceptors: self.interceptors?.makeScanShieldedTRC20NotesByIvkInterceptors() ?? [],
        userFunction: self.scanShieldedTRC20NotesByIvk(request:context:)
      )

    case "ScanShieldedTRC20NotesByOvk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_OvkDecryptTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_DecryptNotesTRC20>(),
        interceptors: self.interceptors?.makeScanShieldedTRC20NotesByOvkInterceptors() ?? [],
        userFunction: self.scanShieldedTRC20NotesByOvk(request:context:)
      )

    case "IsShieldedTRC20ContractNoteSpent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NfTRC20Parameters>(),
        responseSerializer: ProtobufSerializer<Protocol_NullifierResult>(),
        interceptors: self.interceptors?.makeIsShieldedTRC20ContractNoteSpentInterceptors() ?? [],
        userFunction: self.isShieldedTRC20ContractNoteSpent(request:context:)
      )

    case "GetRewardInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetRewardInfoInterceptors() ?? [],
        userFunction: self.getRewardInfo(request:context:)
      )

    case "GetBrokerageInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetBrokerageInfoInterceptors() ?? [],
        userFunction: self.getBrokerageInfo(request:context:)
      )

    case "TriggerConstantContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_TriggerSmartContract>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionExtention>(),
        interceptors: self.interceptors?.makeTriggerConstantContractInterceptors() ?? [],
        userFunction: self.triggerConstantContract(request:context:)
      )

    case "GetTransactionInfoByBlockNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionInfoList>(),
        interceptors: self.interceptors?.makeGetTransactionInfoByBlockNumInterceptors() ?? [],
        userFunction: self.getTransactionInfoByBlockNum(request:context:)
      )

    case "GetMarketOrderById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrder>(),
        interceptors: self.interceptors?.makeGetMarketOrderByIdInterceptors() ?? [],
        userFunction: self.getMarketOrderById(request:context:)
      )

    case "GetMarketOrderByAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_BytesMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderList>(),
        interceptors: self.interceptors?.makeGetMarketOrderByAccountInterceptors() ?? [],
        userFunction: self.getMarketOrderByAccount(request:context:)
      )

    case "GetMarketPriceByPair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketOrderPair>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketPriceList>(),
        interceptors: self.interceptors?.makeGetMarketPriceByPairInterceptors() ?? [],
        userFunction: self.getMarketPriceByPair(request:context:)
      )

    case "GetMarketOrderListByPair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_MarketOrderPair>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderList>(),
        interceptors: self.interceptors?.makeGetMarketOrderListByPairInterceptors() ?? [],
        userFunction: self.getMarketOrderListByPair(request:context:)
      )

    case "GetMarketPairList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MarketOrderPairList>(),
        interceptors: self.interceptors?.makeGetMarketPairListInterceptors() ?? [],
        userFunction: self.getMarketPairList(request:context:)
      )

    case "GetBurnTrx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_NumberMessage>(),
        interceptors: self.interceptors?.makeGetBurnTrxInterceptors() ?? [],
        userFunction: self.getBurnTrx(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Protocol_WalletSolidityServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when handling 'getAccountById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountByIdInterceptors() -> [ServerInterceptor<Protocol_Account, Protocol_Account>]

  /// - Returns: Interceptors to use when handling 'listWitnesses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListWitnessesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_WitnessList>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueListInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getPaginatedAssetIssueList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaginatedAssetIssueListInterceptors() -> [ServerInterceptor<Protocol_PaginatedMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueByName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueByNameInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueListByName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueListByNameInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueList>]

  /// - Returns: Interceptors to use when handling 'getAssetIssueById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetIssueByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_AssetIssueContract>]

  /// - Returns: Interceptors to use when handling 'getNowBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNowBlockInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getNowBlock2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNowBlock2Interceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when handling 'getBlockByNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getBlockByNum2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByNum2Interceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_BlockExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionCountByBlockNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionCountByBlockNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getDelegatedResource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegatedResourceInterceptors() -> [ServerInterceptor<Protocol_DelegatedResourceMessage, Protocol_DelegatedResourceList>]

  /// - Returns: Interceptors to use when handling 'getDelegatedResourceAccountIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegatedResourceAccountIndexInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_DelegatedResourceAccountIndex>]

  /// - Returns: Interceptors to use when handling 'getExchangeById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetExchangeByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Exchange>]

  /// - Returns: Interceptors to use when handling 'listExchanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListExchangesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_ExchangeList>]

  /// - Returns: Interceptors to use when handling 'getTransactionById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_Transaction>]

  /// - Returns: Interceptors to use when handling 'getTransactionInfoById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionInfoByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_TransactionInfo>]

  /// - Returns: Interceptors to use when handling 'generateAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateAddressInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_AddressPrKeyPairMessage>]

  /// - Returns: Interceptors to use when handling 'getMerkleTreeVoucherInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMerkleTreeVoucherInfoInterceptors() -> [ServerInterceptor<Protocol_OutputPointInfo, Protocol_IncrementalMerkleVoucherInfo>]

  /// - Returns: Interceptors to use when handling 'scanNoteByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanNoteByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when handling 'scanAndMarkNoteByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanAndMarkNoteByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptAndMarkParameters, Protocol_DecryptNotesMarked>]

  /// - Returns: Interceptors to use when handling 'scanNoteByOvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanNoteByOvkInterceptors() -> [ServerInterceptor<Protocol_OvkDecryptParameters, Protocol_DecryptNotes>]

  /// - Returns: Interceptors to use when handling 'isSpend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsSpendInterceptors() -> [ServerInterceptor<Protocol_NoteParameters, Protocol_SpendResult>]

  /// - Returns: Interceptors to use when handling 'scanShieldedTRC20NotesByIvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanShieldedTRC20NotesByIvkInterceptors() -> [ServerInterceptor<Protocol_IvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when handling 'scanShieldedTRC20NotesByOvk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScanShieldedTRC20NotesByOvkInterceptors() -> [ServerInterceptor<Protocol_OvkDecryptTRC20Parameters, Protocol_DecryptNotesTRC20>]

  /// - Returns: Interceptors to use when handling 'isShieldedTRC20ContractNoteSpent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsShieldedTRC20ContractNoteSpentInterceptors() -> [ServerInterceptor<Protocol_NfTRC20Parameters, Protocol_NullifierResult>]

  /// - Returns: Interceptors to use when handling 'getRewardInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRewardInfoInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'getBrokerageInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBrokerageInfoInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_NumberMessage>]

  /// - Returns: Interceptors to use when handling 'triggerConstantContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTriggerConstantContractInterceptors() -> [ServerInterceptor<Protocol_TriggerSmartContract, Protocol_TransactionExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionInfoByBlockNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionInfoByBlockNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_TransactionInfoList>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderByIdInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_MarketOrder>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderByAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderByAccountInterceptors() -> [ServerInterceptor<Protocol_BytesMessage, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when handling 'getMarketPriceByPair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketPriceByPairInterceptors() -> [ServerInterceptor<Protocol_MarketOrderPair, Protocol_MarketPriceList>]

  /// - Returns: Interceptors to use when handling 'getMarketOrderListByPair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketOrderListByPairInterceptors() -> [ServerInterceptor<Protocol_MarketOrderPair, Protocol_MarketOrderList>]

  /// - Returns: Interceptors to use when handling 'getMarketPairList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarketPairListInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_MarketOrderPairList>]

  /// - Returns: Interceptors to use when handling 'getBurnTrx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBurnTrxInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_NumberMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_WalletExtensionProvider: CallHandlerProvider {
  var interceptors: Protocol_WalletExtensionServerInterceptorFactoryProtocol? { get }

  ///Please use GetTransactionsFromThis2 instead of this function.
  func getTransactionsFromThis(request: Protocol_AccountPaginated, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionList>

  ///Use this function instead of GetTransactionsFromThis.
  func getTransactionsFromThis2(request: Protocol_AccountPaginated, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionListExtention>

  ///Please use GetTransactionsToThis2 instead of this function.
  func getTransactionsToThis(request: Protocol_AccountPaginated, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionList>

  ///Use this function instead of GetTransactionsToThis.
  func getTransactionsToThis2(request: Protocol_AccountPaginated, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_TransactionListExtention>
}

extension Protocol_WalletExtensionProvider {
  internal var serviceName: Substring { return "protocol.WalletExtension" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetTransactionsFromThis":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountPaginated>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionList>(),
        interceptors: self.interceptors?.makeGetTransactionsFromThisInterceptors() ?? [],
        userFunction: self.getTransactionsFromThis(request:context:)
      )

    case "GetTransactionsFromThis2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountPaginated>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionListExtention>(),
        interceptors: self.interceptors?.makeGetTransactionsFromThis2Interceptors() ?? [],
        userFunction: self.getTransactionsFromThis2(request:context:)
      )

    case "GetTransactionsToThis":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountPaginated>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionList>(),
        interceptors: self.interceptors?.makeGetTransactionsToThisInterceptors() ?? [],
        userFunction: self.getTransactionsToThis(request:context:)
      )

    case "GetTransactionsToThis2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_AccountPaginated>(),
        responseSerializer: ProtobufSerializer<Protocol_TransactionListExtention>(),
        interceptors: self.interceptors?.makeGetTransactionsToThis2Interceptors() ?? [],
        userFunction: self.getTransactionsToThis2(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Protocol_WalletExtensionServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getTransactionsFromThis'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionsFromThisInterceptors() -> [ServerInterceptor<Protocol_AccountPaginated, Protocol_TransactionList>]

  /// - Returns: Interceptors to use when handling 'getTransactionsFromThis2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionsFromThis2Interceptors() -> [ServerInterceptor<Protocol_AccountPaginated, Protocol_TransactionListExtention>]

  /// - Returns: Interceptors to use when handling 'getTransactionsToThis'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionsToThisInterceptors() -> [ServerInterceptor<Protocol_AccountPaginated, Protocol_TransactionList>]

  /// - Returns: Interceptors to use when handling 'getTransactionsToThis2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionsToThis2Interceptors() -> [ServerInterceptor<Protocol_AccountPaginated, Protocol_TransactionListExtention>]
}
/// the api of tron's db
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_DatabaseProvider: CallHandlerProvider {
  var interceptors: Protocol_DatabaseServerInterceptorFactoryProtocol? { get }

  /// for tapos
  func getBlockReference(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_BlockReference>

  func getDynamicProperties(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_DynamicProperties>

  func getNowBlock(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>

  func getBlockByNum(request: Protocol_NumberMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_Block>
}

extension Protocol_DatabaseProvider {
  internal var serviceName: Substring { return "protocol.Database" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getBlockReference":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_BlockReference>(),
        interceptors: self.interceptors?.makegetBlockReferenceInterceptors() ?? [],
        userFunction: self.getBlockReference(request:context:)
      )

    case "GetDynamicProperties":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_DynamicProperties>(),
        interceptors: self.interceptors?.makeGetDynamicPropertiesInterceptors() ?? [],
        userFunction: self.getDynamicProperties(request:context:)
      )

    case "GetNowBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetNowBlockInterceptors() ?? [],
        userFunction: self.getNowBlock(request:context:)
      )

    case "GetBlockByNum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_NumberMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_Block>(),
        interceptors: self.interceptors?.makeGetBlockByNumInterceptors() ?? [],
        userFunction: self.getBlockByNum(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Protocol_DatabaseServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getBlockReference'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetBlockReferenceInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_BlockReference>]

  /// - Returns: Interceptors to use when handling 'getDynamicProperties'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDynamicPropertiesInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_DynamicProperties>]

  /// - Returns: Interceptors to use when handling 'getNowBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNowBlockInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_Block>]

  /// - Returns: Interceptors to use when handling 'getBlockByNum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockByNumInterceptors() -> [ServerInterceptor<Protocol_NumberMessage, Protocol_Block>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_MonitorProvider: CallHandlerProvider {
  var interceptors: Protocol_MonitorServerInterceptorFactoryProtocol? { get }

  func getStatsInfo(request: Protocol_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Protocol_MetricsInfo>
}

extension Protocol_MonitorProvider {
  internal var serviceName: Substring { return "protocol.Monitor" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetStatsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Protocol_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Protocol_MetricsInfo>(),
        interceptors: self.interceptors?.makeGetStatsInfoInterceptors() ?? [],
        userFunction: self.getStatsInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Protocol_MonitorServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getStatsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStatsInfoInterceptors() -> [ServerInterceptor<Protocol_EmptyMessage, Protocol_MetricsInfo>]
}
/// the api of tron's network such as node list.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Protocol_NetworkProvider: CallHandlerProvider {
  var interceptors: Protocol_NetworkServerInterceptorFactoryProtocol? { get }
}

extension Protocol_NetworkProvider {
  internal var serviceName: Substring { return "protocol.Network" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

internal protocol Protocol_NetworkServerInterceptorFactoryProtocol {
}
